package hsec

import (
	"encoding/json"
	"time"

	"n2x.dev/x-api-go/grpc/common/blob"
	"n2x.dev/x-api-go/grpc/network/n2xsp"
	"n2x.dev/x-api-go/grpc/resources/nstore/hsecdb"
	"n2x.dev/x-lib/pkg/errors"
	"n2x.dev/x-lib/pkg/n2xp/queuing"
	"n2x.dev/x-lib/pkg/utils"
)

const chunkSize int = 1048576 // 1 MB
// const chunkSize int = 64 * 1024 // 64 KiB

func transferDataTx(r *hsecdb.HostSecurityReportRequest, n2xID string) error {
	hsr, err := readReportFile()
	if err != nil {
		return errors.Wrapf(err, "[%v] function readReportFile()", errors.Trace())
	}

	hsecReportData, err := json.Marshal(hsr)
	if err != nil {
		return errors.Wrapf(err, "[%v] function json.Marshal()", errors.Trace())
	}

	payloadChecksum, err := utils.ChecksumBlake3(hsecReportData)
	if err != nil {
		return errors.Wrapf(err, "[%v] function utils.ChecksumBlake3()", errors.Trace())
	}

	payloadSize := len(hsecReportData)

	for b := 0; b < payloadSize; b += chunkSize {
		hsrr := &hsecdb.HostSecurityReportResponse{
			AccountID: r.Request.AccountID,
			TenantID:  r.Request.TenantID,
			NodeID:    r.Request.NodeID,
			QueryID:   r.Request.QueryID,
			Report:    nil, // hsr
			ReportChunk: &blob.Chunk{
				IsLastChunk:     false,
				PayloadChecksum: payloadChecksum,
			},
			Timestamp: time.Now().UnixMilli(),
		}

		if (b + chunkSize) > payloadSize {
			hsrr.ReportChunk.Data = hsecReportData[b:payloadSize]
			hsrr.ReportChunk.IsLastChunk = true
		} else {
			hsrr.ReportChunk.Data = hsecReportData[b : b+chunkSize]
		}

		chunkChecksum, err := utils.ChecksumBlake3(hsrr.ReportChunk.Data)
		if err != nil {
			return errors.Wrapf(err, "[%v] function utils.ChecksumBlake3()", errors.Trace())
		}

		hsrr.ReportChunk.ChunkChecksum = chunkChecksum
		hsrr.ReportChunk.ChunkSize = int64(len(hsrr.ReportChunk.Data))

		queuing.TxControlQueue <- &n2xsp.Payload{
			SrcID:           n2xID,
			DstControllerID: r.Request.ControllerID,
			Type:            n2xsp.PDUType_NODEMGMT,
			NodeMgmtPDU: &n2xsp.NodeMgmtPDU{
				Type:               n2xsp.NodeMgmtMsgType_NODE_HOST_SECURITY_RESPONSE,
				HsecReportResponse: hsrr,
			},
		}
	}

	return nil
}
