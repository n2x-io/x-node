// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.0--rc1
// source: n2x/protobuf/rpc/v1/topologyAPI.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	empty "n2x.dev/x-api-go/grpc/common/empty"
	topology "n2x.dev/x-api-go/grpc/resources/topology"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TopologyAPI_GetStatsTopology_FullMethodName        = "/api.TopologyAPI/GetStatsTopology"
	TopologyAPI_GetStatsAlerts_FullMethodName          = "/api.TopologyAPI/GetStatsAlerts"
	TopologyAPI_GetStatsWorkflows_FullMethodName       = "/api.TopologyAPI/GetStatsWorkflows"
	TopologyAPI_GetNodeSummaryMap_FullMethodName       = "/api.TopologyAPI/GetNodeSummaryMap"
	TopologyAPI_GetTopologyTags_FullMethodName         = "/api.TopologyAPI/GetTopologyTags"
	TopologyAPI_GetTopologyNetworkList_FullMethodName  = "/api.TopologyAPI/GetTopologyNetworkList"
	TopologyAPI_GetTopologySubnetList_FullMethodName   = "/api.TopologyAPI/GetTopologySubnetList"
	TopologyAPI_GetTopologyNodeList_FullMethodName     = "/api.TopologyAPI/GetTopologyNodeList"
	TopologyAPI_GetTopologyVSList_FullMethodName       = "/api.TopologyAPI/GetTopologyVSList"
	TopologyAPI_CreateNetwork_FullMethodName           = "/api.TopologyAPI/CreateNetwork"
	TopologyAPI_ListNetworks_FullMethodName            = "/api.TopologyAPI/ListNetworks"
	TopologyAPI_GetNetwork_FullMethodName              = "/api.TopologyAPI/GetNetwork"
	TopologyAPI_UpdateNetwork_FullMethodName           = "/api.TopologyAPI/UpdateNetwork"
	TopologyAPI_DeleteNetwork_FullMethodName           = "/api.TopologyAPI/DeleteNetwork"
	TopologyAPI_CreateSubnet_FullMethodName            = "/api.TopologyAPI/CreateSubnet"
	TopologyAPI_ListSubnets_FullMethodName             = "/api.TopologyAPI/ListSubnets"
	TopologyAPI_GetSubnet_FullMethodName               = "/api.TopologyAPI/GetSubnet"
	TopologyAPI_UpdateSubnet_FullMethodName            = "/api.TopologyAPI/UpdateSubnet"
	TopologyAPI_DeleteSubnet_FullMethodName            = "/api.TopologyAPI/DeleteSubnet"
	TopologyAPI_RemoveSubnetIPAMEntry_FullMethodName   = "/api.TopologyAPI/RemoveSubnetIPAMEntry"
	TopologyAPI_GetNetworkPolicy_FullMethodName        = "/api.TopologyAPI/GetNetworkPolicy"
	TopologyAPI_DeleteNetworkPolicy_FullMethodName     = "/api.TopologyAPI/DeleteNetworkPolicy"
	TopologyAPI_CreateNetworkFilter_FullMethodName     = "/api.TopologyAPI/CreateNetworkFilter"
	TopologyAPI_UpdateNetworkFilter_FullMethodName     = "/api.TopologyAPI/UpdateNetworkFilter"
	TopologyAPI_DeleteNetworkFilter_FullMethodName     = "/api.TopologyAPI/DeleteNetworkFilter"
	TopologyAPI_CreateGenericNode_FullMethodName       = "/api.TopologyAPI/CreateGenericNode"
	TopologyAPI_CreateKubernetesGateway_FullMethodName = "/api.TopologyAPI/CreateKubernetesGateway"
	TopologyAPI_CreateKubernetesPod_FullMethodName     = "/api.TopologyAPI/CreateKubernetesPod"
	TopologyAPI_GetNodeInstance_FullMethodName         = "/api.TopologyAPI/GetNodeInstance"
	TopologyAPI_GetNodeGroupInstance_FullMethodName    = "/api.TopologyAPI/GetNodeGroupInstance"
	TopologyAPI_ListNodes_FullMethodName               = "/api.TopologyAPI/ListNodes"
	TopologyAPI_GetNode_FullMethodName                 = "/api.TopologyAPI/GetNode"
	TopologyAPI_UpdateNodeMetadata_FullMethodName      = "/api.TopologyAPI/UpdateNodeMetadata"
	TopologyAPI_UpdateNodeNetworking_FullMethodName    = "/api.TopologyAPI/UpdateNodeNetworking"
	TopologyAPI_UpdateNodeManagement_FullMethodName    = "/api.TopologyAPI/UpdateNodeManagement"
	TopologyAPI_DeleteNode_FullMethodName              = "/api.TopologyAPI/DeleteNode"
	TopologyAPI_DeleteNodeGroup_FullMethodName         = "/api.TopologyAPI/DeleteNodeGroup"
	TopologyAPI_DeleteNetworkEndpoint_FullMethodName   = "/api.TopologyAPI/DeleteNetworkEndpoint"
	TopologyAPI_CheckVSCNAME_FullMethodName            = "/api.TopologyAPI/CheckVSCNAME"
	TopologyAPI_CreateVS_FullMethodName                = "/api.TopologyAPI/CreateVS"
	TopologyAPI_ListVSs_FullMethodName                 = "/api.TopologyAPI/ListVSs"
	TopologyAPI_GetVS_FullMethodName                   = "/api.TopologyAPI/GetVS"
	TopologyAPI_AddVSAppSvc_FullMethodName             = "/api.TopologyAPI/AddVSAppSvc"
	TopologyAPI_DeleteVSAppSvc_FullMethodName          = "/api.TopologyAPI/DeleteVSAppSvc"
	TopologyAPI_UpdateVS_FullMethodName                = "/api.TopologyAPI/UpdateVS"
	TopologyAPI_DeleteVS_FullMethodName                = "/api.TopologyAPI/DeleteVS"
)

// TopologyAPIClient is the client API for TopologyAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// [t-api] TopologyAPI Definition: Topology Resources
type TopologyAPIClient interface {
	// Gets stats - topology.
	GetStatsTopology(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.StatsTopology, error)
	// Gets stats - alerts.
	GetStatsAlerts(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.StatsAlerts, error)
	// Gets stats - workflows.
	GetStatsWorkflows(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.StatsWorkflows, error)
	// Gets node summary map.
	GetNodeSummaryMap(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.NodeSummaryMap, error)
	// Gets topology tag list.
	GetTopologyTags(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.TopologyTags, error)
	// Gets toplogy network list.
	GetTopologyNetworkList(ctx context.Context, in *topology.TopologyNetworkListRequest, opts ...grpc.CallOption) (*topology.TopologyNetworkList, error)
	// Gets toplogy subnet list.
	GetTopologySubnetList(ctx context.Context, in *topology.TopologySubnetListRequest, opts ...grpc.CallOption) (*topology.TopologySubnetList, error)
	// Gets toplogy node list.
	GetTopologyNodeList(ctx context.Context, in *topology.TopologyNodeListRequest, opts ...grpc.CallOption) (*topology.TopologyNodeList, error)
	// Gets toplogy VS list.
	GetTopologyVSList(ctx context.Context, in *topology.TopologyVSListRequest, opts ...grpc.CallOption) (*topology.TopologyVSList, error)
	// Creates a network.
	CreateNetwork(ctx context.Context, in *topology.NewNetworkRequest, opts ...grpc.CallOption) (*topology.Network, error)
	// Lists networks in a tenant.
	ListNetworks(ctx context.Context, in *topology.ListNetworksRequest, opts ...grpc.CallOption) (*topology.Networks, error)
	// Gets a network.
	GetNetwork(ctx context.Context, in *topology.NetworkReq, opts ...grpc.CallOption) (*topology.Network, error)
	// Updates a network.
	UpdateNetwork(ctx context.Context, in *topology.UpdateNetworkRequest, opts ...grpc.CallOption) (*topology.Network, error)
	// Deletes a network.
	DeleteNetwork(ctx context.Context, in *topology.NetworkReq, opts ...grpc.CallOption) (*empty.Response, error)
	// Creates a subnet.
	CreateSubnet(ctx context.Context, in *topology.NewSubnetRequest, opts ...grpc.CallOption) (*topology.Subnet, error)
	// Lists subnets in a network.
	ListSubnets(ctx context.Context, in *topology.ListSubnetsRequest, opts ...grpc.CallOption) (*topology.Subnets, error)
	// Gets a subnet.
	GetSubnet(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Subnet, error)
	// Updates a subnet.
	UpdateSubnet(ctx context.Context, in *topology.UpdateSubnetRequest, opts ...grpc.CallOption) (*topology.Subnet, error)
	// Deletes a subnet.
	DeleteSubnet(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*empty.Response, error)
	// Removes an IPAM entry from a subnet.
	RemoveSubnetIPAMEntry(ctx context.Context, in *topology.RemoveSubnetIPAMEntryRequest, opts ...grpc.CallOption) (*topology.Subnet, error)
	// Gets subnet security policy.
	GetNetworkPolicy(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Policy, error)
	// Deletes subnet security policy.
	DeleteNetworkPolicy(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Policy, error)
	// Creates a network filter in the subnet security policy.
	CreateNetworkFilter(ctx context.Context, in *topology.NewNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error)
	// Updates a network filter in the subnet security policy.
	UpdateNetworkFilter(ctx context.Context, in *topology.UpdateNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error)
	// Deletes a network filter in the subnet security policy.
	DeleteNetworkFilter(ctx context.Context, in *topology.DeleteNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error)
	// Creates a node.
	CreateGenericNode(ctx context.Context, in *topology.NewNodeRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error)
	CreateKubernetesGateway(ctx context.Context, in *topology.NewNodeRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error)
	CreateKubernetesPod(ctx context.Context, in *topology.NewNodeRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error)
	GetNodeInstance(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*topology.NodeInstance, error)
	GetNodeGroupInstance(ctx context.Context, in *topology.NodeGroupReq, opts ...grpc.CallOption) (*topology.NodeInstance, error)
	// Lists nodes.
	ListNodes(ctx context.Context, in *topology.ListNodesRequest, opts ...grpc.CallOption) (*topology.Nodes, error)
	// Gets a node.
	GetNode(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*topology.Node, error)
	// Updates node metadata.
	UpdateNodeMetadata(ctx context.Context, in *topology.UpdateNodeMetadataRequest, opts ...grpc.CallOption) (*topology.Node, error)
	// Updates node networking configuration.
	UpdateNodeNetworking(ctx context.Context, in *topology.UpdateNodeNetworkingRequest, opts ...grpc.CallOption) (*topology.Node, error)
	// Updates node management configuration.
	UpdateNodeManagement(ctx context.Context, in *topology.UpdateNodeManagementRequest, opts ...grpc.CallOption) (*topology.Node, error)
	// Removes a node from the database.
	DeleteNode(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*empty.Response, error)
	DeleteNodeGroup(ctx context.Context, in *topology.NodeGroupReq, opts ...grpc.CallOption) (*empty.Response, error)
	DeleteNetworkEndpoint(ctx context.Context, in *topology.EndpointRequest, opts ...grpc.CallOption) (*empty.Response, error)
	// Check VS DNS CNAME.
	CheckVSCNAME(ctx context.Context, in *topology.CheckVSCNAMERequest, opts ...grpc.CallOption) (*topology.CheckVSCNAMEResponse, error)
	// Creates a VS.
	CreateVS(ctx context.Context, in *topology.NewVSRequest, opts ...grpc.CallOption) (*topology.VS, error)
	// Lists VSs.
	ListVSs(ctx context.Context, in *topology.ListVSsRequest, opts ...grpc.CallOption) (*topology.VSs, error)
	// Gets a VS.
	GetVS(ctx context.Context, in *topology.VSReq, opts ...grpc.CallOption) (*topology.VS, error)
	// Adds a node appSvc to a existing VS.
	AddVSAppSvc(ctx context.Context, in *topology.AddVSAppSvcRequest, opts ...grpc.CallOption) (*topology.VS, error)
	// Removes a node appSvc from a existing VS.
	DeleteVSAppSvc(ctx context.Context, in *topology.DeleteVSAppSvcRequest, opts ...grpc.CallOption) (*topology.VS, error)
	// Updates a VS.
	UpdateVS(ctx context.Context, in *topology.UpdateVSRequest, opts ...grpc.CallOption) (*topology.VS, error)
	// Deletes a VS.
	DeleteVS(ctx context.Context, in *topology.VSReq, opts ...grpc.CallOption) (*empty.Response, error)
}

type topologyAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTopologyAPIClient(cc grpc.ClientConnInterface) TopologyAPIClient {
	return &topologyAPIClient{cc}
}

func (c *topologyAPIClient) GetStatsTopology(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.StatsTopology, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.StatsTopology)
	err := c.cc.Invoke(ctx, TopologyAPI_GetStatsTopology_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetStatsAlerts(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.StatsAlerts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.StatsAlerts)
	err := c.cc.Invoke(ctx, TopologyAPI_GetStatsAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetStatsWorkflows(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.StatsWorkflows, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.StatsWorkflows)
	err := c.cc.Invoke(ctx, TopologyAPI_GetStatsWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetNodeSummaryMap(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.NodeSummaryMap, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.NodeSummaryMap)
	err := c.cc.Invoke(ctx, TopologyAPI_GetNodeSummaryMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetTopologyTags(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.TopologyTags, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.TopologyTags)
	err := c.cc.Invoke(ctx, TopologyAPI_GetTopologyTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetTopologyNetworkList(ctx context.Context, in *topology.TopologyNetworkListRequest, opts ...grpc.CallOption) (*topology.TopologyNetworkList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.TopologyNetworkList)
	err := c.cc.Invoke(ctx, TopologyAPI_GetTopologyNetworkList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetTopologySubnetList(ctx context.Context, in *topology.TopologySubnetListRequest, opts ...grpc.CallOption) (*topology.TopologySubnetList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.TopologySubnetList)
	err := c.cc.Invoke(ctx, TopologyAPI_GetTopologySubnetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetTopologyNodeList(ctx context.Context, in *topology.TopologyNodeListRequest, opts ...grpc.CallOption) (*topology.TopologyNodeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.TopologyNodeList)
	err := c.cc.Invoke(ctx, TopologyAPI_GetTopologyNodeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetTopologyVSList(ctx context.Context, in *topology.TopologyVSListRequest, opts ...grpc.CallOption) (*topology.TopologyVSList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.TopologyVSList)
	err := c.cc.Invoke(ctx, TopologyAPI_GetTopologyVSList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateNetwork(ctx context.Context, in *topology.NewNetworkRequest, opts ...grpc.CallOption) (*topology.Network, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Network)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) ListNetworks(ctx context.Context, in *topology.ListNetworksRequest, opts ...grpc.CallOption) (*topology.Networks, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Networks)
	err := c.cc.Invoke(ctx, TopologyAPI_ListNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetNetwork(ctx context.Context, in *topology.NetworkReq, opts ...grpc.CallOption) (*topology.Network, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Network)
	err := c.cc.Invoke(ctx, TopologyAPI_GetNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateNetwork(ctx context.Context, in *topology.UpdateNetworkRequest, opts ...grpc.CallOption) (*topology.Network, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Network)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteNetwork(ctx context.Context, in *topology.NetworkReq, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateSubnet(ctx context.Context, in *topology.NewSubnetRequest, opts ...grpc.CallOption) (*topology.Subnet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Subnet)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) ListSubnets(ctx context.Context, in *topology.ListSubnetsRequest, opts ...grpc.CallOption) (*topology.Subnets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Subnets)
	err := c.cc.Invoke(ctx, TopologyAPI_ListSubnets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetSubnet(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Subnet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Subnet)
	err := c.cc.Invoke(ctx, TopologyAPI_GetSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateSubnet(ctx context.Context, in *topology.UpdateSubnetRequest, opts ...grpc.CallOption) (*topology.Subnet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Subnet)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteSubnet(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) RemoveSubnetIPAMEntry(ctx context.Context, in *topology.RemoveSubnetIPAMEntryRequest, opts ...grpc.CallOption) (*topology.Subnet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Subnet)
	err := c.cc.Invoke(ctx, TopologyAPI_RemoveSubnetIPAMEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetNetworkPolicy(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Policy)
	err := c.cc.Invoke(ctx, TopologyAPI_GetNetworkPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteNetworkPolicy(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Policy)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteNetworkPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateNetworkFilter(ctx context.Context, in *topology.NewNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Policy)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateNetworkFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateNetworkFilter(ctx context.Context, in *topology.UpdateNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Policy)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateNetworkFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteNetworkFilter(ctx context.Context, in *topology.DeleteNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Policy)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteNetworkFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateGenericNode(ctx context.Context, in *topology.NewNodeRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.NodeInstance)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateGenericNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateKubernetesGateway(ctx context.Context, in *topology.NewNodeRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.NodeInstance)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateKubernetesGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateKubernetesPod(ctx context.Context, in *topology.NewNodeRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.NodeInstance)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateKubernetesPod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetNodeInstance(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*topology.NodeInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.NodeInstance)
	err := c.cc.Invoke(ctx, TopologyAPI_GetNodeInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetNodeGroupInstance(ctx context.Context, in *topology.NodeGroupReq, opts ...grpc.CallOption) (*topology.NodeInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.NodeInstance)
	err := c.cc.Invoke(ctx, TopologyAPI_GetNodeGroupInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) ListNodes(ctx context.Context, in *topology.ListNodesRequest, opts ...grpc.CallOption) (*topology.Nodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Nodes)
	err := c.cc.Invoke(ctx, TopologyAPI_ListNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetNode(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*topology.Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Node)
	err := c.cc.Invoke(ctx, TopologyAPI_GetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateNodeMetadata(ctx context.Context, in *topology.UpdateNodeMetadataRequest, opts ...grpc.CallOption) (*topology.Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Node)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateNodeMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateNodeNetworking(ctx context.Context, in *topology.UpdateNodeNetworkingRequest, opts ...grpc.CallOption) (*topology.Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Node)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateNodeNetworking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateNodeManagement(ctx context.Context, in *topology.UpdateNodeManagementRequest, opts ...grpc.CallOption) (*topology.Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Node)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateNodeManagement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteNode(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteNodeGroup(ctx context.Context, in *topology.NodeGroupReq, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteNodeGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteNetworkEndpoint(ctx context.Context, in *topology.EndpointRequest, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteNetworkEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CheckVSCNAME(ctx context.Context, in *topology.CheckVSCNAMERequest, opts ...grpc.CallOption) (*topology.CheckVSCNAMEResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.CheckVSCNAMEResponse)
	err := c.cc.Invoke(ctx, TopologyAPI_CheckVSCNAME_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateVS(ctx context.Context, in *topology.NewVSRequest, opts ...grpc.CallOption) (*topology.VS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.VS)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateVS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) ListVSs(ctx context.Context, in *topology.ListVSsRequest, opts ...grpc.CallOption) (*topology.VSs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.VSs)
	err := c.cc.Invoke(ctx, TopologyAPI_ListVSs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetVS(ctx context.Context, in *topology.VSReq, opts ...grpc.CallOption) (*topology.VS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.VS)
	err := c.cc.Invoke(ctx, TopologyAPI_GetVS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) AddVSAppSvc(ctx context.Context, in *topology.AddVSAppSvcRequest, opts ...grpc.CallOption) (*topology.VS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.VS)
	err := c.cc.Invoke(ctx, TopologyAPI_AddVSAppSvc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteVSAppSvc(ctx context.Context, in *topology.DeleteVSAppSvcRequest, opts ...grpc.CallOption) (*topology.VS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.VS)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteVSAppSvc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateVS(ctx context.Context, in *topology.UpdateVSRequest, opts ...grpc.CallOption) (*topology.VS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.VS)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateVS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteVS(ctx context.Context, in *topology.VSReq, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteVS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopologyAPIServer is the server API for TopologyAPI service.
// All implementations must embed UnimplementedTopologyAPIServer
// for forward compatibility
//
// [t-api] TopologyAPI Definition: Topology Resources
type TopologyAPIServer interface {
	// Gets stats - topology.
	GetStatsTopology(context.Context, *topology.TopologyRequest) (*topology.StatsTopology, error)
	// Gets stats - alerts.
	GetStatsAlerts(context.Context, *topology.TopologyRequest) (*topology.StatsAlerts, error)
	// Gets stats - workflows.
	GetStatsWorkflows(context.Context, *topology.TopologyRequest) (*topology.StatsWorkflows, error)
	// Gets node summary map.
	GetNodeSummaryMap(context.Context, *topology.TopologyRequest) (*topology.NodeSummaryMap, error)
	// Gets topology tag list.
	GetTopologyTags(context.Context, *topology.TopologyRequest) (*topology.TopologyTags, error)
	// Gets toplogy network list.
	GetTopologyNetworkList(context.Context, *topology.TopologyNetworkListRequest) (*topology.TopologyNetworkList, error)
	// Gets toplogy subnet list.
	GetTopologySubnetList(context.Context, *topology.TopologySubnetListRequest) (*topology.TopologySubnetList, error)
	// Gets toplogy node list.
	GetTopologyNodeList(context.Context, *topology.TopologyNodeListRequest) (*topology.TopologyNodeList, error)
	// Gets toplogy VS list.
	GetTopologyVSList(context.Context, *topology.TopologyVSListRequest) (*topology.TopologyVSList, error)
	// Creates a network.
	CreateNetwork(context.Context, *topology.NewNetworkRequest) (*topology.Network, error)
	// Lists networks in a tenant.
	ListNetworks(context.Context, *topology.ListNetworksRequest) (*topology.Networks, error)
	// Gets a network.
	GetNetwork(context.Context, *topology.NetworkReq) (*topology.Network, error)
	// Updates a network.
	UpdateNetwork(context.Context, *topology.UpdateNetworkRequest) (*topology.Network, error)
	// Deletes a network.
	DeleteNetwork(context.Context, *topology.NetworkReq) (*empty.Response, error)
	// Creates a subnet.
	CreateSubnet(context.Context, *topology.NewSubnetRequest) (*topology.Subnet, error)
	// Lists subnets in a network.
	ListSubnets(context.Context, *topology.ListSubnetsRequest) (*topology.Subnets, error)
	// Gets a subnet.
	GetSubnet(context.Context, *topology.SubnetReq) (*topology.Subnet, error)
	// Updates a subnet.
	UpdateSubnet(context.Context, *topology.UpdateSubnetRequest) (*topology.Subnet, error)
	// Deletes a subnet.
	DeleteSubnet(context.Context, *topology.SubnetReq) (*empty.Response, error)
	// Removes an IPAM entry from a subnet.
	RemoveSubnetIPAMEntry(context.Context, *topology.RemoveSubnetIPAMEntryRequest) (*topology.Subnet, error)
	// Gets subnet security policy.
	GetNetworkPolicy(context.Context, *topology.SubnetReq) (*topology.Policy, error)
	// Deletes subnet security policy.
	DeleteNetworkPolicy(context.Context, *topology.SubnetReq) (*topology.Policy, error)
	// Creates a network filter in the subnet security policy.
	CreateNetworkFilter(context.Context, *topology.NewNetworkFilterRequest) (*topology.Policy, error)
	// Updates a network filter in the subnet security policy.
	UpdateNetworkFilter(context.Context, *topology.UpdateNetworkFilterRequest) (*topology.Policy, error)
	// Deletes a network filter in the subnet security policy.
	DeleteNetworkFilter(context.Context, *topology.DeleteNetworkFilterRequest) (*topology.Policy, error)
	// Creates a node.
	CreateGenericNode(context.Context, *topology.NewNodeRequest) (*topology.NodeInstance, error)
	CreateKubernetesGateway(context.Context, *topology.NewNodeRequest) (*topology.NodeInstance, error)
	CreateKubernetesPod(context.Context, *topology.NewNodeRequest) (*topology.NodeInstance, error)
	GetNodeInstance(context.Context, *topology.NodeReq) (*topology.NodeInstance, error)
	GetNodeGroupInstance(context.Context, *topology.NodeGroupReq) (*topology.NodeInstance, error)
	// Lists nodes.
	ListNodes(context.Context, *topology.ListNodesRequest) (*topology.Nodes, error)
	// Gets a node.
	GetNode(context.Context, *topology.NodeReq) (*topology.Node, error)
	// Updates node metadata.
	UpdateNodeMetadata(context.Context, *topology.UpdateNodeMetadataRequest) (*topology.Node, error)
	// Updates node networking configuration.
	UpdateNodeNetworking(context.Context, *topology.UpdateNodeNetworkingRequest) (*topology.Node, error)
	// Updates node management configuration.
	UpdateNodeManagement(context.Context, *topology.UpdateNodeManagementRequest) (*topology.Node, error)
	// Removes a node from the database.
	DeleteNode(context.Context, *topology.NodeReq) (*empty.Response, error)
	DeleteNodeGroup(context.Context, *topology.NodeGroupReq) (*empty.Response, error)
	DeleteNetworkEndpoint(context.Context, *topology.EndpointRequest) (*empty.Response, error)
	// Check VS DNS CNAME.
	CheckVSCNAME(context.Context, *topology.CheckVSCNAMERequest) (*topology.CheckVSCNAMEResponse, error)
	// Creates a VS.
	CreateVS(context.Context, *topology.NewVSRequest) (*topology.VS, error)
	// Lists VSs.
	ListVSs(context.Context, *topology.ListVSsRequest) (*topology.VSs, error)
	// Gets a VS.
	GetVS(context.Context, *topology.VSReq) (*topology.VS, error)
	// Adds a node appSvc to a existing VS.
	AddVSAppSvc(context.Context, *topology.AddVSAppSvcRequest) (*topology.VS, error)
	// Removes a node appSvc from a existing VS.
	DeleteVSAppSvc(context.Context, *topology.DeleteVSAppSvcRequest) (*topology.VS, error)
	// Updates a VS.
	UpdateVS(context.Context, *topology.UpdateVSRequest) (*topology.VS, error)
	// Deletes a VS.
	DeleteVS(context.Context, *topology.VSReq) (*empty.Response, error)
	mustEmbedUnimplementedTopologyAPIServer()
}

// UnimplementedTopologyAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTopologyAPIServer struct {
}

func (UnimplementedTopologyAPIServer) GetStatsTopology(context.Context, *topology.TopologyRequest) (*topology.StatsTopology, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsTopology not implemented")
}
func (UnimplementedTopologyAPIServer) GetStatsAlerts(context.Context, *topology.TopologyRequest) (*topology.StatsAlerts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsAlerts not implemented")
}
func (UnimplementedTopologyAPIServer) GetStatsWorkflows(context.Context, *topology.TopologyRequest) (*topology.StatsWorkflows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsWorkflows not implemented")
}
func (UnimplementedTopologyAPIServer) GetNodeSummaryMap(context.Context, *topology.TopologyRequest) (*topology.NodeSummaryMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeSummaryMap not implemented")
}
func (UnimplementedTopologyAPIServer) GetTopologyTags(context.Context, *topology.TopologyRequest) (*topology.TopologyTags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologyTags not implemented")
}
func (UnimplementedTopologyAPIServer) GetTopologyNetworkList(context.Context, *topology.TopologyNetworkListRequest) (*topology.TopologyNetworkList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologyNetworkList not implemented")
}
func (UnimplementedTopologyAPIServer) GetTopologySubnetList(context.Context, *topology.TopologySubnetListRequest) (*topology.TopologySubnetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologySubnetList not implemented")
}
func (UnimplementedTopologyAPIServer) GetTopologyNodeList(context.Context, *topology.TopologyNodeListRequest) (*topology.TopologyNodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologyNodeList not implemented")
}
func (UnimplementedTopologyAPIServer) GetTopologyVSList(context.Context, *topology.TopologyVSListRequest) (*topology.TopologyVSList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologyVSList not implemented")
}
func (UnimplementedTopologyAPIServer) CreateNetwork(context.Context, *topology.NewNetworkRequest) (*topology.Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedTopologyAPIServer) ListNetworks(context.Context, *topology.ListNetworksRequest) (*topology.Networks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedTopologyAPIServer) GetNetwork(context.Context, *topology.NetworkReq) (*topology.Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateNetwork(context.Context, *topology.UpdateNetworkRequest) (*topology.Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteNetwork(context.Context, *topology.NetworkReq) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedTopologyAPIServer) CreateSubnet(context.Context, *topology.NewSubnetRequest) (*topology.Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (UnimplementedTopologyAPIServer) ListSubnets(context.Context, *topology.ListSubnetsRequest) (*topology.Subnets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubnets not implemented")
}
func (UnimplementedTopologyAPIServer) GetSubnet(context.Context, *topology.SubnetReq) (*topology.Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateSubnet(context.Context, *topology.UpdateSubnetRequest) (*topology.Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteSubnet(context.Context, *topology.SubnetReq) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (UnimplementedTopologyAPIServer) RemoveSubnetIPAMEntry(context.Context, *topology.RemoveSubnetIPAMEntryRequest) (*topology.Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubnetIPAMEntry not implemented")
}
func (UnimplementedTopologyAPIServer) GetNetworkPolicy(context.Context, *topology.SubnetReq) (*topology.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkPolicy not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteNetworkPolicy(context.Context, *topology.SubnetReq) (*topology.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkPolicy not implemented")
}
func (UnimplementedTopologyAPIServer) CreateNetworkFilter(context.Context, *topology.NewNetworkFilterRequest) (*topology.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkFilter not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateNetworkFilter(context.Context, *topology.UpdateNetworkFilterRequest) (*topology.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkFilter not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteNetworkFilter(context.Context, *topology.DeleteNetworkFilterRequest) (*topology.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkFilter not implemented")
}
func (UnimplementedTopologyAPIServer) CreateGenericNode(context.Context, *topology.NewNodeRequest) (*topology.NodeInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenericNode not implemented")
}
func (UnimplementedTopologyAPIServer) CreateKubernetesGateway(context.Context, *topology.NewNodeRequest) (*topology.NodeInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKubernetesGateway not implemented")
}
func (UnimplementedTopologyAPIServer) CreateKubernetesPod(context.Context, *topology.NewNodeRequest) (*topology.NodeInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKubernetesPod not implemented")
}
func (UnimplementedTopologyAPIServer) GetNodeInstance(context.Context, *topology.NodeReq) (*topology.NodeInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInstance not implemented")
}
func (UnimplementedTopologyAPIServer) GetNodeGroupInstance(context.Context, *topology.NodeGroupReq) (*topology.NodeInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeGroupInstance not implemented")
}
func (UnimplementedTopologyAPIServer) ListNodes(context.Context, *topology.ListNodesRequest) (*topology.Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedTopologyAPIServer) GetNode(context.Context, *topology.NodeReq) (*topology.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateNodeMetadata(context.Context, *topology.UpdateNodeMetadataRequest) (*topology.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeMetadata not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateNodeNetworking(context.Context, *topology.UpdateNodeNetworkingRequest) (*topology.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeNetworking not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateNodeManagement(context.Context, *topology.UpdateNodeManagementRequest) (*topology.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeManagement not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteNode(context.Context, *topology.NodeReq) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteNodeGroup(context.Context, *topology.NodeGroupReq) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeGroup not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteNetworkEndpoint(context.Context, *topology.EndpointRequest) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkEndpoint not implemented")
}
func (UnimplementedTopologyAPIServer) CheckVSCNAME(context.Context, *topology.CheckVSCNAMERequest) (*topology.CheckVSCNAMEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVSCNAME not implemented")
}
func (UnimplementedTopologyAPIServer) CreateVS(context.Context, *topology.NewVSRequest) (*topology.VS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVS not implemented")
}
func (UnimplementedTopologyAPIServer) ListVSs(context.Context, *topology.ListVSsRequest) (*topology.VSs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVSs not implemented")
}
func (UnimplementedTopologyAPIServer) GetVS(context.Context, *topology.VSReq) (*topology.VS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVS not implemented")
}
func (UnimplementedTopologyAPIServer) AddVSAppSvc(context.Context, *topology.AddVSAppSvcRequest) (*topology.VS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVSAppSvc not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteVSAppSvc(context.Context, *topology.DeleteVSAppSvcRequest) (*topology.VS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVSAppSvc not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateVS(context.Context, *topology.UpdateVSRequest) (*topology.VS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVS not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteVS(context.Context, *topology.VSReq) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVS not implemented")
}
func (UnimplementedTopologyAPIServer) mustEmbedUnimplementedTopologyAPIServer() {}

// UnsafeTopologyAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopologyAPIServer will
// result in compilation errors.
type UnsafeTopologyAPIServer interface {
	mustEmbedUnimplementedTopologyAPIServer()
}

func RegisterTopologyAPIServer(s grpc.ServiceRegistrar, srv TopologyAPIServer) {
	s.RegisterService(&TopologyAPI_ServiceDesc, srv)
}

func _TopologyAPI_GetStatsTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.TopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetStatsTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetStatsTopology_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetStatsTopology(ctx, req.(*topology.TopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetStatsAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.TopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetStatsAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetStatsAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetStatsAlerts(ctx, req.(*topology.TopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetStatsWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.TopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetStatsWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetStatsWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetStatsWorkflows(ctx, req.(*topology.TopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetNodeSummaryMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.TopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetNodeSummaryMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetNodeSummaryMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetNodeSummaryMap(ctx, req.(*topology.TopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetTopologyTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.TopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetTopologyTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetTopologyTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetTopologyTags(ctx, req.(*topology.TopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetTopologyNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.TopologyNetworkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetTopologyNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetTopologyNetworkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetTopologyNetworkList(ctx, req.(*topology.TopologyNetworkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetTopologySubnetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.TopologySubnetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetTopologySubnetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetTopologySubnetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetTopologySubnetList(ctx, req.(*topology.TopologySubnetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetTopologyNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.TopologyNodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetTopologyNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetTopologyNodeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetTopologyNodeList(ctx, req.(*topology.TopologyNodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetTopologyVSList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.TopologyVSListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetTopologyVSList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetTopologyVSList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetTopologyVSList(ctx, req.(*topology.TopologyVSListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateNetwork(ctx, req.(*topology.NewNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).ListNetworks(ctx, req.(*topology.ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NetworkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetNetwork(ctx, req.(*topology.NetworkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateNetwork(ctx, req.(*topology.UpdateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NetworkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteNetwork(ctx, req.(*topology.NetworkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateSubnet(ctx, req.(*topology.NewSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_ListSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.ListSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).ListSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_ListSubnets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).ListSubnets(ctx, req.(*topology.ListSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.SubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetSubnet(ctx, req.(*topology.SubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateSubnet(ctx, req.(*topology.UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.SubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteSubnet(ctx, req.(*topology.SubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_RemoveSubnetIPAMEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.RemoveSubnetIPAMEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).RemoveSubnetIPAMEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_RemoveSubnetIPAMEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).RemoveSubnetIPAMEntry(ctx, req.(*topology.RemoveSubnetIPAMEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.SubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetNetworkPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetNetworkPolicy(ctx, req.(*topology.SubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.SubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteNetworkPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteNetworkPolicy(ctx, req.(*topology.SubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateNetworkFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewNetworkFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateNetworkFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateNetworkFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateNetworkFilter(ctx, req.(*topology.NewNetworkFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateNetworkFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateNetworkFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateNetworkFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateNetworkFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateNetworkFilter(ctx, req.(*topology.UpdateNetworkFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteNetworkFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.DeleteNetworkFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteNetworkFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteNetworkFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteNetworkFilter(ctx, req.(*topology.DeleteNetworkFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateGenericNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateGenericNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateGenericNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateGenericNode(ctx, req.(*topology.NewNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateKubernetesGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateKubernetesGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateKubernetesGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateKubernetesGateway(ctx, req.(*topology.NewNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateKubernetesPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateKubernetesPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateKubernetesPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateKubernetesPod(ctx, req.(*topology.NewNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetNodeInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetNodeInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetNodeInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetNodeInstance(ctx, req.(*topology.NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetNodeGroupInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NodeGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetNodeGroupInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetNodeGroupInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetNodeGroupInstance(ctx, req.(*topology.NodeGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).ListNodes(ctx, req.(*topology.ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetNode(ctx, req.(*topology.NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateNodeMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateNodeMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateNodeMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateNodeMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateNodeMetadata(ctx, req.(*topology.UpdateNodeMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateNodeNetworking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateNodeNetworkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateNodeNetworking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateNodeNetworking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateNodeNetworking(ctx, req.(*topology.UpdateNodeNetworkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateNodeManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateNodeManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateNodeManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateNodeManagement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateNodeManagement(ctx, req.(*topology.UpdateNodeManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteNode(ctx, req.(*topology.NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NodeGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteNodeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteNodeGroup(ctx, req.(*topology.NodeGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteNetworkEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.EndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteNetworkEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteNetworkEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteNetworkEndpoint(ctx, req.(*topology.EndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CheckVSCNAME_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.CheckVSCNAMERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CheckVSCNAME(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CheckVSCNAME_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CheckVSCNAME(ctx, req.(*topology.CheckVSCNAMERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewVSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateVS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateVS(ctx, req.(*topology.NewVSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_ListVSs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.ListVSsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).ListVSs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_ListVSs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).ListVSs(ctx, req.(*topology.ListVSsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.VSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetVS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetVS(ctx, req.(*topology.VSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_AddVSAppSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.AddVSAppSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).AddVSAppSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_AddVSAppSvc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).AddVSAppSvc(ctx, req.(*topology.AddVSAppSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteVSAppSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.DeleteVSAppSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteVSAppSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteVSAppSvc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteVSAppSvc(ctx, req.(*topology.DeleteVSAppSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateVSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateVS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateVS(ctx, req.(*topology.UpdateVSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.VSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteVS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteVS(ctx, req.(*topology.VSReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TopologyAPI_ServiceDesc is the grpc.ServiceDesc for TopologyAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopologyAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TopologyAPI",
	HandlerType: (*TopologyAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatsTopology",
			Handler:    _TopologyAPI_GetStatsTopology_Handler,
		},
		{
			MethodName: "GetStatsAlerts",
			Handler:    _TopologyAPI_GetStatsAlerts_Handler,
		},
		{
			MethodName: "GetStatsWorkflows",
			Handler:    _TopologyAPI_GetStatsWorkflows_Handler,
		},
		{
			MethodName: "GetNodeSummaryMap",
			Handler:    _TopologyAPI_GetNodeSummaryMap_Handler,
		},
		{
			MethodName: "GetTopologyTags",
			Handler:    _TopologyAPI_GetTopologyTags_Handler,
		},
		{
			MethodName: "GetTopologyNetworkList",
			Handler:    _TopologyAPI_GetTopologyNetworkList_Handler,
		},
		{
			MethodName: "GetTopologySubnetList",
			Handler:    _TopologyAPI_GetTopologySubnetList_Handler,
		},
		{
			MethodName: "GetTopologyNodeList",
			Handler:    _TopologyAPI_GetTopologyNodeList_Handler,
		},
		{
			MethodName: "GetTopologyVSList",
			Handler:    _TopologyAPI_GetTopologyVSList_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _TopologyAPI_CreateNetwork_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _TopologyAPI_ListNetworks_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _TopologyAPI_GetNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _TopologyAPI_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _TopologyAPI_DeleteNetwork_Handler,
		},
		{
			MethodName: "CreateSubnet",
			Handler:    _TopologyAPI_CreateSubnet_Handler,
		},
		{
			MethodName: "ListSubnets",
			Handler:    _TopologyAPI_ListSubnets_Handler,
		},
		{
			MethodName: "GetSubnet",
			Handler:    _TopologyAPI_GetSubnet_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _TopologyAPI_UpdateSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _TopologyAPI_DeleteSubnet_Handler,
		},
		{
			MethodName: "RemoveSubnetIPAMEntry",
			Handler:    _TopologyAPI_RemoveSubnetIPAMEntry_Handler,
		},
		{
			MethodName: "GetNetworkPolicy",
			Handler:    _TopologyAPI_GetNetworkPolicy_Handler,
		},
		{
			MethodName: "DeleteNetworkPolicy",
			Handler:    _TopologyAPI_DeleteNetworkPolicy_Handler,
		},
		{
			MethodName: "CreateNetworkFilter",
			Handler:    _TopologyAPI_CreateNetworkFilter_Handler,
		},
		{
			MethodName: "UpdateNetworkFilter",
			Handler:    _TopologyAPI_UpdateNetworkFilter_Handler,
		},
		{
			MethodName: "DeleteNetworkFilter",
			Handler:    _TopologyAPI_DeleteNetworkFilter_Handler,
		},
		{
			MethodName: "CreateGenericNode",
			Handler:    _TopologyAPI_CreateGenericNode_Handler,
		},
		{
			MethodName: "CreateKubernetesGateway",
			Handler:    _TopologyAPI_CreateKubernetesGateway_Handler,
		},
		{
			MethodName: "CreateKubernetesPod",
			Handler:    _TopologyAPI_CreateKubernetesPod_Handler,
		},
		{
			MethodName: "GetNodeInstance",
			Handler:    _TopologyAPI_GetNodeInstance_Handler,
		},
		{
			MethodName: "GetNodeGroupInstance",
			Handler:    _TopologyAPI_GetNodeGroupInstance_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _TopologyAPI_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _TopologyAPI_GetNode_Handler,
		},
		{
			MethodName: "UpdateNodeMetadata",
			Handler:    _TopologyAPI_UpdateNodeMetadata_Handler,
		},
		{
			MethodName: "UpdateNodeNetworking",
			Handler:    _TopologyAPI_UpdateNodeNetworking_Handler,
		},
		{
			MethodName: "UpdateNodeManagement",
			Handler:    _TopologyAPI_UpdateNodeManagement_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _TopologyAPI_DeleteNode_Handler,
		},
		{
			MethodName: "DeleteNodeGroup",
			Handler:    _TopologyAPI_DeleteNodeGroup_Handler,
		},
		{
			MethodName: "DeleteNetworkEndpoint",
			Handler:    _TopologyAPI_DeleteNetworkEndpoint_Handler,
		},
		{
			MethodName: "CheckVSCNAME",
			Handler:    _TopologyAPI_CheckVSCNAME_Handler,
		},
		{
			MethodName: "CreateVS",
			Handler:    _TopologyAPI_CreateVS_Handler,
		},
		{
			MethodName: "ListVSs",
			Handler:    _TopologyAPI_ListVSs_Handler,
		},
		{
			MethodName: "GetVS",
			Handler:    _TopologyAPI_GetVS_Handler,
		},
		{
			MethodName: "AddVSAppSvc",
			Handler:    _TopologyAPI_AddVSAppSvc_Handler,
		},
		{
			MethodName: "DeleteVSAppSvc",
			Handler:    _TopologyAPI_DeleteVSAppSvc_Handler,
		},
		{
			MethodName: "UpdateVS",
			Handler:    _TopologyAPI_UpdateVS_Handler,
		},
		{
			MethodName: "DeleteVS",
			Handler:    _TopologyAPI_DeleteVS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "n2x/protobuf/rpc/v1/topologyAPI.proto",
}
