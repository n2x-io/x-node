// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: n2x/protobuf/rpc/v1/nstoreAPI.proto

/*
Package rpc is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package rpc

import (
	"context"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	"n2x.dev/x-api-go/grpc/resources/nstore/hsecdb"
	"n2x.dev/x-api-go/grpc/resources/nstore/metricsdb"
	"n2x.dev/x-api-go/grpc/resources/nstore/netdb"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join

func request_NStoreAPI_GetNodeHostMetrics_0(ctx context.Context, marshaler runtime.Marshaler, client NStoreAPIClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq metricsdb.HostMetricsRequest
	var metadata runtime.ServerMetadata

	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["request.accountID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.accountID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.accountID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.accountID", err)
	}

	val, ok = pathParams["request.tenantID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.tenantID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.tenantID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.tenantID", err)
	}

	val, ok = pathParams["request.nodeID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.nodeID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.nodeID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.nodeID", err)
	}

	msg, err := client.GetNodeHostMetrics(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_NStoreAPI_GetNodeHostMetrics_0(ctx context.Context, marshaler runtime.Marshaler, server NStoreAPIServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq metricsdb.HostMetricsRequest
	var metadata runtime.ServerMetadata

	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["request.accountID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.accountID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.accountID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.accountID", err)
	}

	val, ok = pathParams["request.tenantID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.tenantID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.tenantID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.tenantID", err)
	}

	val, ok = pathParams["request.nodeID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.nodeID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.nodeID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.nodeID", err)
	}

	msg, err := server.GetNodeHostMetrics(ctx, &protoReq)
	return msg, metadata, err

}

func request_NStoreAPI_GetNodeNetCtState_0(ctx context.Context, marshaler runtime.Marshaler, client NStoreAPIClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq netdb.ConntrackTableRequest
	var metadata runtime.ServerMetadata

	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["request.accountID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.accountID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.accountID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.accountID", err)
	}

	val, ok = pathParams["request.tenantID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.tenantID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.tenantID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.tenantID", err)
	}

	val, ok = pathParams["request.nodeID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.nodeID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.nodeID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.nodeID", err)
	}

	msg, err := client.GetNodeNetCtState(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_NStoreAPI_GetNodeNetCtState_0(ctx context.Context, marshaler runtime.Marshaler, server NStoreAPIServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq netdb.ConntrackTableRequest
	var metadata runtime.ServerMetadata

	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["request.accountID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.accountID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.accountID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.accountID", err)
	}

	val, ok = pathParams["request.tenantID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.tenantID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.tenantID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.tenantID", err)
	}

	val, ok = pathParams["request.nodeID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.nodeID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.nodeID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.nodeID", err)
	}

	msg, err := server.GetNodeNetCtState(ctx, &protoReq)
	return msg, metadata, err

}

func request_NStoreAPI_GetNodeNetCtLog_0(ctx context.Context, marshaler runtime.Marshaler, client NStoreAPIClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq netdb.ConntrackLogRequest
	var metadata runtime.ServerMetadata

	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["request.accountID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.accountID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.accountID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.accountID", err)
	}

	val, ok = pathParams["request.tenantID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.tenantID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.tenantID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.tenantID", err)
	}

	val, ok = pathParams["request.nodeID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.nodeID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.nodeID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.nodeID", err)
	}

	msg, err := client.GetNodeNetCtLog(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_NStoreAPI_GetNodeNetCtLog_0(ctx context.Context, marshaler runtime.Marshaler, server NStoreAPIServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq netdb.ConntrackLogRequest
	var metadata runtime.ServerMetadata

	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["request.accountID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.accountID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.accountID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.accountID", err)
	}

	val, ok = pathParams["request.tenantID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.tenantID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.tenantID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.tenantID", err)
	}

	val, ok = pathParams["request.nodeID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.nodeID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.nodeID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.nodeID", err)
	}

	msg, err := server.GetNodeNetCtLog(ctx, &protoReq)
	return msg, metadata, err

}

func request_NStoreAPI_GetNodeNetTrafficMetrics_0(ctx context.Context, marshaler runtime.Marshaler, client NStoreAPIClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq netdb.TrafficMetricsRequest
	var metadata runtime.ServerMetadata

	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["request.accountID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.accountID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.accountID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.accountID", err)
	}

	val, ok = pathParams["request.tenantID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.tenantID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.tenantID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.tenantID", err)
	}

	val, ok = pathParams["request.nodeID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.nodeID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.nodeID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.nodeID", err)
	}

	msg, err := client.GetNodeNetTrafficMetrics(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_NStoreAPI_GetNodeNetTrafficMetrics_0(ctx context.Context, marshaler runtime.Marshaler, server NStoreAPIServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq netdb.TrafficMetricsRequest
	var metadata runtime.ServerMetadata

	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["request.accountID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.accountID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.accountID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.accountID", err)
	}

	val, ok = pathParams["request.tenantID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.tenantID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.tenantID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.tenantID", err)
	}

	val, ok = pathParams["request.nodeID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.nodeID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.nodeID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.nodeID", err)
	}

	msg, err := server.GetNodeNetTrafficMetrics(ctx, &protoReq)
	return msg, metadata, err

}

func request_NStoreAPI_GetNodeHostSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, client NStoreAPIClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq hsecdb.HostSecurityReportRequest
	var metadata runtime.ServerMetadata

	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["request.accountID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.accountID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.accountID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.accountID", err)
	}

	val, ok = pathParams["request.tenantID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.tenantID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.tenantID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.tenantID", err)
	}

	val, ok = pathParams["request.nodeID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.nodeID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.nodeID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.nodeID", err)
	}

	msg, err := client.GetNodeHostSecurityReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_NStoreAPI_GetNodeHostSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, server NStoreAPIServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq hsecdb.HostSecurityReportRequest
	var metadata runtime.ServerMetadata

	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["request.accountID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.accountID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.accountID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.accountID", err)
	}

	val, ok = pathParams["request.tenantID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.tenantID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.tenantID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.tenantID", err)
	}

	val, ok = pathParams["request.nodeID"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "request.nodeID")
	}

	err = runtime.PopulateFieldFromPath(&protoReq, "request.nodeID", val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "request.nodeID", err)
	}

	msg, err := server.GetNodeHostSecurityReport(ctx, &protoReq)
	return msg, metadata, err

}

// RegisterNStoreAPIHandlerServer registers the http handlers for service NStoreAPI to "mux".
// UnaryRPC     :call NStoreAPIServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterNStoreAPIHandlerFromEndpoint instead.
func RegisterNStoreAPIHandlerServer(ctx context.Context, mux *runtime.ServeMux, server NStoreAPIServer) error {

	mux.Handle("POST", pattern_NStoreAPI_GetNodeHostMetrics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/api.NStoreAPI/GetNodeHostMetrics", runtime.WithHTTPPathPattern("/api/v1/accounts/{request.accountID}/tenants/{request.tenantID}/nodes/{request.nodeID}/nstore:hostmetrics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_NStoreAPI_GetNodeHostMetrics_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_NStoreAPI_GetNodeHostMetrics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_NStoreAPI_GetNodeNetCtState_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/api.NStoreAPI/GetNodeNetCtState", runtime.WithHTTPPathPattern("/api/v1/accounts/{request.accountID}/tenants/{request.tenantID}/nodes/{request.nodeID}/nstore:netctstate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_NStoreAPI_GetNodeNetCtState_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_NStoreAPI_GetNodeNetCtState_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_NStoreAPI_GetNodeNetCtLog_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/api.NStoreAPI/GetNodeNetCtLog", runtime.WithHTTPPathPattern("/api/v1/accounts/{request.accountID}/tenants/{request.tenantID}/nodes/{request.nodeID}/nstore:netctlog"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_NStoreAPI_GetNodeNetCtLog_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_NStoreAPI_GetNodeNetCtLog_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_NStoreAPI_GetNodeNetTrafficMetrics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/api.NStoreAPI/GetNodeNetTrafficMetrics", runtime.WithHTTPPathPattern("/api/v1/accounts/{request.accountID}/tenants/{request.tenantID}/nodes/{request.nodeID}/nstore:nettraffic"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_NStoreAPI_GetNodeNetTrafficMetrics_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_NStoreAPI_GetNodeNetTrafficMetrics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_NStoreAPI_GetNodeHostSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/api.NStoreAPI/GetNodeHostSecurityReport", runtime.WithHTTPPathPattern("/api/v1/accounts/{request.accountID}/tenants/{request.tenantID}/nodes/{request.nodeID}/nstore:hostsecurity"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_NStoreAPI_GetNodeHostSecurityReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_NStoreAPI_GetNodeHostSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterNStoreAPIHandlerFromEndpoint is same as RegisterNStoreAPIHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterNStoreAPIHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterNStoreAPIHandler(ctx, mux, conn)
}

// RegisterNStoreAPIHandler registers the http handlers for service NStoreAPI to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterNStoreAPIHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterNStoreAPIHandlerClient(ctx, mux, NewNStoreAPIClient(conn))
}

// RegisterNStoreAPIHandlerClient registers the http handlers for service NStoreAPI
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "NStoreAPIClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "NStoreAPIClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "NStoreAPIClient" to call the correct interceptors.
func RegisterNStoreAPIHandlerClient(ctx context.Context, mux *runtime.ServeMux, client NStoreAPIClient) error {

	mux.Handle("POST", pattern_NStoreAPI_GetNodeHostMetrics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/api.NStoreAPI/GetNodeHostMetrics", runtime.WithHTTPPathPattern("/api/v1/accounts/{request.accountID}/tenants/{request.tenantID}/nodes/{request.nodeID}/nstore:hostmetrics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_NStoreAPI_GetNodeHostMetrics_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_NStoreAPI_GetNodeHostMetrics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_NStoreAPI_GetNodeNetCtState_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/api.NStoreAPI/GetNodeNetCtState", runtime.WithHTTPPathPattern("/api/v1/accounts/{request.accountID}/tenants/{request.tenantID}/nodes/{request.nodeID}/nstore:netctstate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_NStoreAPI_GetNodeNetCtState_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_NStoreAPI_GetNodeNetCtState_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_NStoreAPI_GetNodeNetCtLog_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/api.NStoreAPI/GetNodeNetCtLog", runtime.WithHTTPPathPattern("/api/v1/accounts/{request.accountID}/tenants/{request.tenantID}/nodes/{request.nodeID}/nstore:netctlog"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_NStoreAPI_GetNodeNetCtLog_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_NStoreAPI_GetNodeNetCtLog_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_NStoreAPI_GetNodeNetTrafficMetrics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/api.NStoreAPI/GetNodeNetTrafficMetrics", runtime.WithHTTPPathPattern("/api/v1/accounts/{request.accountID}/tenants/{request.tenantID}/nodes/{request.nodeID}/nstore:nettraffic"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_NStoreAPI_GetNodeNetTrafficMetrics_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_NStoreAPI_GetNodeNetTrafficMetrics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_NStoreAPI_GetNodeHostSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/api.NStoreAPI/GetNodeHostSecurityReport", runtime.WithHTTPPathPattern("/api/v1/accounts/{request.accountID}/tenants/{request.tenantID}/nodes/{request.nodeID}/nstore:hostsecurity"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_NStoreAPI_GetNodeHostSecurityReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_NStoreAPI_GetNodeHostSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_NStoreAPI_GetNodeHostMetrics_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 1, 0, 4, 1, 5, 3, 2, 4, 1, 0, 4, 1, 5, 5, 2, 6, 1, 0, 4, 1, 5, 7, 2, 8}, []string{"api", "v1", "accounts", "request.accountID", "tenants", "request.tenantID", "nodes", "request.nodeID", "nstore"}, "hostmetrics"))

	pattern_NStoreAPI_GetNodeNetCtState_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 1, 0, 4, 1, 5, 3, 2, 4, 1, 0, 4, 1, 5, 5, 2, 6, 1, 0, 4, 1, 5, 7, 2, 8}, []string{"api", "v1", "accounts", "request.accountID", "tenants", "request.tenantID", "nodes", "request.nodeID", "nstore"}, "netctstate"))

	pattern_NStoreAPI_GetNodeNetCtLog_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 1, 0, 4, 1, 5, 3, 2, 4, 1, 0, 4, 1, 5, 5, 2, 6, 1, 0, 4, 1, 5, 7, 2, 8}, []string{"api", "v1", "accounts", "request.accountID", "tenants", "request.tenantID", "nodes", "request.nodeID", "nstore"}, "netctlog"))

	pattern_NStoreAPI_GetNodeNetTrafficMetrics_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 1, 0, 4, 1, 5, 3, 2, 4, 1, 0, 4, 1, 5, 5, 2, 6, 1, 0, 4, 1, 5, 7, 2, 8}, []string{"api", "v1", "accounts", "request.accountID", "tenants", "request.tenantID", "nodes", "request.nodeID", "nstore"}, "nettraffic"))

	pattern_NStoreAPI_GetNodeHostSecurityReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 1, 0, 4, 1, 5, 3, 2, 4, 1, 0, 4, 1, 5, 5, 2, 6, 1, 0, 4, 1, 5, 7, 2, 8}, []string{"api", "v1", "accounts", "request.accountID", "tenants", "request.tenantID", "nodes", "request.nodeID", "nstore"}, "hostsecurity"))
)

var (
	forward_NStoreAPI_GetNodeHostMetrics_0 = runtime.ForwardResponseMessage

	forward_NStoreAPI_GetNodeNetCtState_0 = runtime.ForwardResponseMessage

	forward_NStoreAPI_GetNodeNetCtLog_0 = runtime.ForwardResponseMessage

	forward_NStoreAPI_GetNodeNetTrafficMetrics_0 = runtime.ForwardResponseMessage

	forward_NStoreAPI_GetNodeHostSecurityReport_0 = runtime.ForwardResponseMessage
)
