// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.0--rc1
// source: n2x/protobuf/rpc/v1/managerAPI.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	empty "n2x.dev/x-api-go/grpc/common/empty"
	nac "n2x.dev/x-api-go/grpc/network/nac"
	routing "n2x.dev/x-api-go/grpc/network/routing"
	controller "n2x.dev/x-api-go/grpc/resources/controller"
	auth "n2x.dev/x-api-go/grpc/resources/iam/auth"
	location "n2x.dev/x-api-go/grpc/resources/location"
	messaging "n2x.dev/x-api-go/grpc/resources/messaging"
	topology "n2x.dev/x-api-go/grpc/resources/topology"
	webhook "n2x.dev/x-api-go/grpc/resources/webhook"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ManagerAPI_Login_FullMethodName                     = "/api.ManagerAPI/Login"
	ManagerAPI_Signin_FullMethodName                    = "/api.ManagerAPI/Signin"
	ManagerAPI_OTPAuthenticate_FullMethodName           = "/api.ManagerAPI/OTPAuthenticate"
	ManagerAPI_IAPAuthenticate_FullMethodName           = "/api.ManagerAPI/IAPAuthenticate"
	ManagerAPI_SessionAuthenticate_FullMethodName       = "/api.ManagerAPI/SessionAuthenticate"
	ManagerAPI_Signout_FullMethodName                   = "/api.ManagerAPI/Signout"
	ManagerAPI_SetUserEmail_FullMethodName              = "/api.ManagerAPI/SetUserEmail"
	ManagerAPI_VerifyUserEmail_FullMethodName           = "/api.ManagerAPI/VerifyUserEmail"
	ManagerAPI_SendMail_FullMethodName                  = "/api.ManagerAPI/SendMail"
	ManagerAPI_ListWebhooks_FullMethodName              = "/api.ManagerAPI/ListWebhooks"
	ManagerAPI_GetWebhook_FullMethodName                = "/api.ManagerAPI/GetWebhook"
	ManagerAPI_DeleteWebhook_FullMethodName             = "/api.ManagerAPI/DeleteWebhook"
	ManagerAPI_CreateLocation_FullMethodName            = "/api.ManagerAPI/CreateLocation"
	ManagerAPI_ListControlLocations_FullMethodName      = "/api.ManagerAPI/ListControlLocations"
	ManagerAPI_ListConnectivityLocations_FullMethodName = "/api.ManagerAPI/ListConnectivityLocations"
	ManagerAPI_ListLocations_FullMethodName             = "/api.ManagerAPI/ListLocations"
	ManagerAPI_GetLocation_FullMethodName               = "/api.ManagerAPI/GetLocation"
	ManagerAPI_UpdateLocation_FullMethodName            = "/api.ManagerAPI/UpdateLocation"
	ManagerAPI_DeleteLocation_FullMethodName            = "/api.ManagerAPI/DeleteLocation"
	ManagerAPI_SelectFederation_FullMethodName          = "/api.ManagerAPI/SelectFederation"
	ManagerAPI_ListFederations_FullMethodName           = "/api.ManagerAPI/ListFederations"
	ManagerAPI_GetFederation_FullMethodName             = "/api.ManagerAPI/GetFederation"
	ManagerAPI_DeleteFederation_FullMethodName          = "/api.ManagerAPI/DeleteFederation"
	ManagerAPI_ListControllers_FullMethodName           = "/api.ManagerAPI/ListControllers"
	ManagerAPI_GetController_FullMethodName             = "/api.ManagerAPI/GetController"
	ManagerAPI_DeleteController_FullMethodName          = "/api.ManagerAPI/DeleteController"
	ManagerAPI_RouterNATProbe_FullMethodName            = "/api.ManagerAPI/RouterNATProbe"
	ManagerAPI_RouterLinkControl_FullMethodName         = "/api.ManagerAPI/RouterLinkControl"
	ManagerAPI_RouterAdmissionControl_FullMethodName    = "/api.ManagerAPI/RouterAdmissionControl"
	ManagerAPI_RegisterRouter_FullMethodName            = "/api.ManagerAPI/RegisterRouter"
	ManagerAPI_CreateRouter_FullMethodName              = "/api.ManagerAPI/CreateRouter"
	ManagerAPI_CreateRouterWebhook_FullMethodName       = "/api.ManagerAPI/CreateRouterWebhook"
	ManagerAPI_ListRouters_FullMethodName               = "/api.ManagerAPI/ListRouters"
	ManagerAPI_GetRouter_FullMethodName                 = "/api.ManagerAPI/GetRouter"
	ManagerAPI_SetRouterCfg_FullMethodName              = "/api.ManagerAPI/SetRouterCfg"
	ManagerAPI_DeleteRouter_FullMethodName              = "/api.ManagerAPI/DeleteRouter"
)

// ManagerAPIClient is the client API for ManagerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// [mgr-api] managerAPI Definition: Manager Resources
type ManagerAPIClient interface {
	// login
	Login(ctx context.Context, in *auth.LoginRequest, opts ...grpc.CallOption) (*auth.AuthenticationResponse, error)
	// signin
	Signin(ctx context.Context, in *auth.OTPSigninRequest, opts ...grpc.CallOption) (*auth.OTPSigninResponse, error)
	// otpAuthenticate
	OTPAuthenticate(ctx context.Context, in *auth.OTPAuthenticationRequest, opts ...grpc.CallOption) (*auth.AuthenticationResponse, error)
	// iapAuthenticate
	IAPAuthenticate(ctx context.Context, in *auth.OTPAuthenticationRequest, opts ...grpc.CallOption) (*auth.AuthenticationResponse, error)
	// sessionAuthenticate
	SessionAuthenticate(ctx context.Context, in *empty.Request, opts ...grpc.CallOption) (*auth.AuthenticationResponse, error)
	// signout
	Signout(ctx context.Context, in *auth.SignoutRequest, opts ...grpc.CallOption) (*auth.SignoutResponse, error)
	// set user email
	SetUserEmail(ctx context.Context, in *auth.SetUserEmailRequest, opts ...grpc.CallOption) (*auth.OTPSigninResponse, error)
	// verify user email
	VerifyUserEmail(ctx context.Context, in *auth.VerifyUserEmailRequest, opts ...grpc.CallOption) (*auth.AuthenticationResponse, error)
	// mail
	SendMail(ctx context.Context, in *messaging.SendMailRequest, opts ...grpc.CallOption) (*empty.Response, error)
	// webhook
	ListWebhooks(ctx context.Context, in *webhook.ListWebhooksRequest, opts ...grpc.CallOption) (*webhook.Webhooks, error)
	GetWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*webhook.Webhook, error)
	DeleteWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*empty.Response, error)
	// location
	CreateLocation(ctx context.Context, in *location.NewLocationRequest, opts ...grpc.CallOption) (*location.Location, error)
	ListControlLocations(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error)
	ListConnectivityLocations(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error)
	ListLocations(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error)
	GetLocation(ctx context.Context, in *location.LocationReq, opts ...grpc.CallOption) (*location.Location, error)
	UpdateLocation(ctx context.Context, in *location.UpdateLocationRequest, opts ...grpc.CallOption) (*location.Location, error)
	DeleteLocation(ctx context.Context, in *location.LocationReq, opts ...grpc.CallOption) (*empty.Response, error)
	// controller federation
	SelectFederation(ctx context.Context, in *location.Location, opts ...grpc.CallOption) (*controller.FederationSelected, error)
	ListFederations(ctx context.Context, in *controller.ListFederationsRequest, opts ...grpc.CallOption) (*controller.Federations, error)
	GetFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Federation, error)
	DeleteFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*empty.Response, error)
	ListControllers(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Controllers, error)
	GetController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*controller.Controller, error)
	DeleteController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*empty.Response, error)
	// routers
	RouterNATProbe(ctx context.Context, in *nac.NATProbe, opts ...grpc.CallOption) (*nac.NATProbe, error)
	RouterLinkControl(ctx context.Context, opts ...grpc.CallOption) (ManagerAPI_RouterLinkControlClient, error)
	RouterAdmissionControl(ctx context.Context, in *nac.RouterAdmissionRequest, opts ...grpc.CallOption) (*nac.RouterAdmissionResponse, error)
	RegisterRouter(ctx context.Context, in *nac.RouterRegRequest, opts ...grpc.CallOption) (*nac.RouterRegResponse, error)
	CreateRouter(ctx context.Context, in *topology.NewRouterRequest, opts ...grpc.CallOption) (*topology.RouterInstance, error)
	CreateRouterWebhook(ctx context.Context, in *topology.RouterReq, opts ...grpc.CallOption) (*topology.RouterInstance, error)
	ListRouters(ctx context.Context, in *topology.ListRoutersRequest, opts ...grpc.CallOption) (*topology.Routers, error)
	GetRouter(ctx context.Context, in *topology.RouterReq, opts ...grpc.CallOption) (*topology.Router, error)
	SetRouterCfg(ctx context.Context, in *topology.SetRouterCfgRequest, opts ...grpc.CallOption) (*topology.Router, error)
	DeleteRouter(ctx context.Context, in *topology.RouterReq, opts ...grpc.CallOption) (*empty.Response, error)
}

type managerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerAPIClient(cc grpc.ClientConnInterface) ManagerAPIClient {
	return &managerAPIClient{cc}
}

func (c *managerAPIClient) Login(ctx context.Context, in *auth.LoginRequest, opts ...grpc.CallOption) (*auth.AuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(auth.AuthenticationResponse)
	err := c.cc.Invoke(ctx, ManagerAPI_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) Signin(ctx context.Context, in *auth.OTPSigninRequest, opts ...grpc.CallOption) (*auth.OTPSigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(auth.OTPSigninResponse)
	err := c.cc.Invoke(ctx, ManagerAPI_Signin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) OTPAuthenticate(ctx context.Context, in *auth.OTPAuthenticationRequest, opts ...grpc.CallOption) (*auth.AuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(auth.AuthenticationResponse)
	err := c.cc.Invoke(ctx, ManagerAPI_OTPAuthenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) IAPAuthenticate(ctx context.Context, in *auth.OTPAuthenticationRequest, opts ...grpc.CallOption) (*auth.AuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(auth.AuthenticationResponse)
	err := c.cc.Invoke(ctx, ManagerAPI_IAPAuthenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) SessionAuthenticate(ctx context.Context, in *empty.Request, opts ...grpc.CallOption) (*auth.AuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(auth.AuthenticationResponse)
	err := c.cc.Invoke(ctx, ManagerAPI_SessionAuthenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) Signout(ctx context.Context, in *auth.SignoutRequest, opts ...grpc.CallOption) (*auth.SignoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(auth.SignoutResponse)
	err := c.cc.Invoke(ctx, ManagerAPI_Signout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) SetUserEmail(ctx context.Context, in *auth.SetUserEmailRequest, opts ...grpc.CallOption) (*auth.OTPSigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(auth.OTPSigninResponse)
	err := c.cc.Invoke(ctx, ManagerAPI_SetUserEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) VerifyUserEmail(ctx context.Context, in *auth.VerifyUserEmailRequest, opts ...grpc.CallOption) (*auth.AuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(auth.AuthenticationResponse)
	err := c.cc.Invoke(ctx, ManagerAPI_VerifyUserEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) SendMail(ctx context.Context, in *messaging.SendMailRequest, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, ManagerAPI_SendMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) ListWebhooks(ctx context.Context, in *webhook.ListWebhooksRequest, opts ...grpc.CallOption) (*webhook.Webhooks, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(webhook.Webhooks)
	err := c.cc.Invoke(ctx, ManagerAPI_ListWebhooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) GetWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*webhook.Webhook, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(webhook.Webhook)
	err := c.cc.Invoke(ctx, ManagerAPI_GetWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) DeleteWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, ManagerAPI_DeleteWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) CreateLocation(ctx context.Context, in *location.NewLocationRequest, opts ...grpc.CallOption) (*location.Location, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(location.Location)
	err := c.cc.Invoke(ctx, ManagerAPI_CreateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) ListControlLocations(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(location.Locations)
	err := c.cc.Invoke(ctx, ManagerAPI_ListControlLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) ListConnectivityLocations(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(location.Locations)
	err := c.cc.Invoke(ctx, ManagerAPI_ListConnectivityLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) ListLocations(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(location.Locations)
	err := c.cc.Invoke(ctx, ManagerAPI_ListLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) GetLocation(ctx context.Context, in *location.LocationReq, opts ...grpc.CallOption) (*location.Location, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(location.Location)
	err := c.cc.Invoke(ctx, ManagerAPI_GetLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) UpdateLocation(ctx context.Context, in *location.UpdateLocationRequest, opts ...grpc.CallOption) (*location.Location, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(location.Location)
	err := c.cc.Invoke(ctx, ManagerAPI_UpdateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) DeleteLocation(ctx context.Context, in *location.LocationReq, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, ManagerAPI_DeleteLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) SelectFederation(ctx context.Context, in *location.Location, opts ...grpc.CallOption) (*controller.FederationSelected, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(controller.FederationSelected)
	err := c.cc.Invoke(ctx, ManagerAPI_SelectFederation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) ListFederations(ctx context.Context, in *controller.ListFederationsRequest, opts ...grpc.CallOption) (*controller.Federations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(controller.Federations)
	err := c.cc.Invoke(ctx, ManagerAPI_ListFederations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) GetFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Federation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(controller.Federation)
	err := c.cc.Invoke(ctx, ManagerAPI_GetFederation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) DeleteFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, ManagerAPI_DeleteFederation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) ListControllers(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Controllers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(controller.Controllers)
	err := c.cc.Invoke(ctx, ManagerAPI_ListControllers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) GetController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*controller.Controller, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(controller.Controller)
	err := c.cc.Invoke(ctx, ManagerAPI_GetController_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) DeleteController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, ManagerAPI_DeleteController_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) RouterNATProbe(ctx context.Context, in *nac.NATProbe, opts ...grpc.CallOption) (*nac.NATProbe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(nac.NATProbe)
	err := c.cc.Invoke(ctx, ManagerAPI_RouterNATProbe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) RouterLinkControl(ctx context.Context, opts ...grpc.CallOption) (ManagerAPI_RouterLinkControlClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ManagerAPI_ServiceDesc.Streams[0], ManagerAPI_RouterLinkControl_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &managerAPIRouterLinkControlClient{ClientStream: stream}
	return x, nil
}

type ManagerAPI_RouterLinkControlClient interface {
	Send(*routing.LSA) error
	Recv() (*routing.Status, error)
	grpc.ClientStream
}

type managerAPIRouterLinkControlClient struct {
	grpc.ClientStream
}

func (x *managerAPIRouterLinkControlClient) Send(m *routing.LSA) error {
	return x.ClientStream.SendMsg(m)
}

func (x *managerAPIRouterLinkControlClient) Recv() (*routing.Status, error) {
	m := new(routing.Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managerAPIClient) RouterAdmissionControl(ctx context.Context, in *nac.RouterAdmissionRequest, opts ...grpc.CallOption) (*nac.RouterAdmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(nac.RouterAdmissionResponse)
	err := c.cc.Invoke(ctx, ManagerAPI_RouterAdmissionControl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) RegisterRouter(ctx context.Context, in *nac.RouterRegRequest, opts ...grpc.CallOption) (*nac.RouterRegResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(nac.RouterRegResponse)
	err := c.cc.Invoke(ctx, ManagerAPI_RegisterRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) CreateRouter(ctx context.Context, in *topology.NewRouterRequest, opts ...grpc.CallOption) (*topology.RouterInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.RouterInstance)
	err := c.cc.Invoke(ctx, ManagerAPI_CreateRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) CreateRouterWebhook(ctx context.Context, in *topology.RouterReq, opts ...grpc.CallOption) (*topology.RouterInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.RouterInstance)
	err := c.cc.Invoke(ctx, ManagerAPI_CreateRouterWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) ListRouters(ctx context.Context, in *topology.ListRoutersRequest, opts ...grpc.CallOption) (*topology.Routers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Routers)
	err := c.cc.Invoke(ctx, ManagerAPI_ListRouters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) GetRouter(ctx context.Context, in *topology.RouterReq, opts ...grpc.CallOption) (*topology.Router, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Router)
	err := c.cc.Invoke(ctx, ManagerAPI_GetRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) SetRouterCfg(ctx context.Context, in *topology.SetRouterCfgRequest, opts ...grpc.CallOption) (*topology.Router, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(topology.Router)
	err := c.cc.Invoke(ctx, ManagerAPI_SetRouterCfg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAPIClient) DeleteRouter(ctx context.Context, in *topology.RouterReq, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, ManagerAPI_DeleteRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerAPIServer is the server API for ManagerAPI service.
// All implementations must embed UnimplementedManagerAPIServer
// for forward compatibility
//
// [mgr-api] managerAPI Definition: Manager Resources
type ManagerAPIServer interface {
	// login
	Login(context.Context, *auth.LoginRequest) (*auth.AuthenticationResponse, error)
	// signin
	Signin(context.Context, *auth.OTPSigninRequest) (*auth.OTPSigninResponse, error)
	// otpAuthenticate
	OTPAuthenticate(context.Context, *auth.OTPAuthenticationRequest) (*auth.AuthenticationResponse, error)
	// iapAuthenticate
	IAPAuthenticate(context.Context, *auth.OTPAuthenticationRequest) (*auth.AuthenticationResponse, error)
	// sessionAuthenticate
	SessionAuthenticate(context.Context, *empty.Request) (*auth.AuthenticationResponse, error)
	// signout
	Signout(context.Context, *auth.SignoutRequest) (*auth.SignoutResponse, error)
	// set user email
	SetUserEmail(context.Context, *auth.SetUserEmailRequest) (*auth.OTPSigninResponse, error)
	// verify user email
	VerifyUserEmail(context.Context, *auth.VerifyUserEmailRequest) (*auth.AuthenticationResponse, error)
	// mail
	SendMail(context.Context, *messaging.SendMailRequest) (*empty.Response, error)
	// webhook
	ListWebhooks(context.Context, *webhook.ListWebhooksRequest) (*webhook.Webhooks, error)
	GetWebhook(context.Context, *webhook.Webhook) (*webhook.Webhook, error)
	DeleteWebhook(context.Context, *webhook.Webhook) (*empty.Response, error)
	// location
	CreateLocation(context.Context, *location.NewLocationRequest) (*location.Location, error)
	ListControlLocations(context.Context, *location.ListLocationsRequest) (*location.Locations, error)
	ListConnectivityLocations(context.Context, *location.ListLocationsRequest) (*location.Locations, error)
	ListLocations(context.Context, *location.ListLocationsRequest) (*location.Locations, error)
	GetLocation(context.Context, *location.LocationReq) (*location.Location, error)
	UpdateLocation(context.Context, *location.UpdateLocationRequest) (*location.Location, error)
	DeleteLocation(context.Context, *location.LocationReq) (*empty.Response, error)
	// controller federation
	SelectFederation(context.Context, *location.Location) (*controller.FederationSelected, error)
	ListFederations(context.Context, *controller.ListFederationsRequest) (*controller.Federations, error)
	GetFederation(context.Context, *controller.Federation) (*controller.Federation, error)
	DeleteFederation(context.Context, *controller.Federation) (*empty.Response, error)
	ListControllers(context.Context, *controller.Federation) (*controller.Controllers, error)
	GetController(context.Context, *controller.Controller) (*controller.Controller, error)
	DeleteController(context.Context, *controller.Controller) (*empty.Response, error)
	// routers
	RouterNATProbe(context.Context, *nac.NATProbe) (*nac.NATProbe, error)
	RouterLinkControl(ManagerAPI_RouterLinkControlServer) error
	RouterAdmissionControl(context.Context, *nac.RouterAdmissionRequest) (*nac.RouterAdmissionResponse, error)
	RegisterRouter(context.Context, *nac.RouterRegRequest) (*nac.RouterRegResponse, error)
	CreateRouter(context.Context, *topology.NewRouterRequest) (*topology.RouterInstance, error)
	CreateRouterWebhook(context.Context, *topology.RouterReq) (*topology.RouterInstance, error)
	ListRouters(context.Context, *topology.ListRoutersRequest) (*topology.Routers, error)
	GetRouter(context.Context, *topology.RouterReq) (*topology.Router, error)
	SetRouterCfg(context.Context, *topology.SetRouterCfgRequest) (*topology.Router, error)
	DeleteRouter(context.Context, *topology.RouterReq) (*empty.Response, error)
	mustEmbedUnimplementedManagerAPIServer()
}

// UnimplementedManagerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedManagerAPIServer struct {
}

func (UnimplementedManagerAPIServer) Login(context.Context, *auth.LoginRequest) (*auth.AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedManagerAPIServer) Signin(context.Context, *auth.OTPSigninRequest) (*auth.OTPSigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signin not implemented")
}
func (UnimplementedManagerAPIServer) OTPAuthenticate(context.Context, *auth.OTPAuthenticationRequest) (*auth.AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OTPAuthenticate not implemented")
}
func (UnimplementedManagerAPIServer) IAPAuthenticate(context.Context, *auth.OTPAuthenticationRequest) (*auth.AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IAPAuthenticate not implemented")
}
func (UnimplementedManagerAPIServer) SessionAuthenticate(context.Context, *empty.Request) (*auth.AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionAuthenticate not implemented")
}
func (UnimplementedManagerAPIServer) Signout(context.Context, *auth.SignoutRequest) (*auth.SignoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signout not implemented")
}
func (UnimplementedManagerAPIServer) SetUserEmail(context.Context, *auth.SetUserEmailRequest) (*auth.OTPSigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserEmail not implemented")
}
func (UnimplementedManagerAPIServer) VerifyUserEmail(context.Context, *auth.VerifyUserEmailRequest) (*auth.AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserEmail not implemented")
}
func (UnimplementedManagerAPIServer) SendMail(context.Context, *messaging.SendMailRequest) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedManagerAPIServer) ListWebhooks(context.Context, *webhook.ListWebhooksRequest) (*webhook.Webhooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (UnimplementedManagerAPIServer) GetWebhook(context.Context, *webhook.Webhook) (*webhook.Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhook not implemented")
}
func (UnimplementedManagerAPIServer) DeleteWebhook(context.Context, *webhook.Webhook) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (UnimplementedManagerAPIServer) CreateLocation(context.Context, *location.NewLocationRequest) (*location.Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (UnimplementedManagerAPIServer) ListControlLocations(context.Context, *location.ListLocationsRequest) (*location.Locations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListControlLocations not implemented")
}
func (UnimplementedManagerAPIServer) ListConnectivityLocations(context.Context, *location.ListLocationsRequest) (*location.Locations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectivityLocations not implemented")
}
func (UnimplementedManagerAPIServer) ListLocations(context.Context, *location.ListLocationsRequest) (*location.Locations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (UnimplementedManagerAPIServer) GetLocation(context.Context, *location.LocationReq) (*location.Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedManagerAPIServer) UpdateLocation(context.Context, *location.UpdateLocationRequest) (*location.Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedManagerAPIServer) DeleteLocation(context.Context, *location.LocationReq) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocation not implemented")
}
func (UnimplementedManagerAPIServer) SelectFederation(context.Context, *location.Location) (*controller.FederationSelected, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectFederation not implemented")
}
func (UnimplementedManagerAPIServer) ListFederations(context.Context, *controller.ListFederationsRequest) (*controller.Federations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFederations not implemented")
}
func (UnimplementedManagerAPIServer) GetFederation(context.Context, *controller.Federation) (*controller.Federation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFederation not implemented")
}
func (UnimplementedManagerAPIServer) DeleteFederation(context.Context, *controller.Federation) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFederation not implemented")
}
func (UnimplementedManagerAPIServer) ListControllers(context.Context, *controller.Federation) (*controller.Controllers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListControllers not implemented")
}
func (UnimplementedManagerAPIServer) GetController(context.Context, *controller.Controller) (*controller.Controller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetController not implemented")
}
func (UnimplementedManagerAPIServer) DeleteController(context.Context, *controller.Controller) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteController not implemented")
}
func (UnimplementedManagerAPIServer) RouterNATProbe(context.Context, *nac.NATProbe) (*nac.NATProbe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouterNATProbe not implemented")
}
func (UnimplementedManagerAPIServer) RouterLinkControl(ManagerAPI_RouterLinkControlServer) error {
	return status.Errorf(codes.Unimplemented, "method RouterLinkControl not implemented")
}
func (UnimplementedManagerAPIServer) RouterAdmissionControl(context.Context, *nac.RouterAdmissionRequest) (*nac.RouterAdmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouterAdmissionControl not implemented")
}
func (UnimplementedManagerAPIServer) RegisterRouter(context.Context, *nac.RouterRegRequest) (*nac.RouterRegResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRouter not implemented")
}
func (UnimplementedManagerAPIServer) CreateRouter(context.Context, *topology.NewRouterRequest) (*topology.RouterInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouter not implemented")
}
func (UnimplementedManagerAPIServer) CreateRouterWebhook(context.Context, *topology.RouterReq) (*topology.RouterInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouterWebhook not implemented")
}
func (UnimplementedManagerAPIServer) ListRouters(context.Context, *topology.ListRoutersRequest) (*topology.Routers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouters not implemented")
}
func (UnimplementedManagerAPIServer) GetRouter(context.Context, *topology.RouterReq) (*topology.Router, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouter not implemented")
}
func (UnimplementedManagerAPIServer) SetRouterCfg(context.Context, *topology.SetRouterCfgRequest) (*topology.Router, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRouterCfg not implemented")
}
func (UnimplementedManagerAPIServer) DeleteRouter(context.Context, *topology.RouterReq) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouter not implemented")
}
func (UnimplementedManagerAPIServer) mustEmbedUnimplementedManagerAPIServer() {}

// UnsafeManagerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerAPIServer will
// result in compilation errors.
type UnsafeManagerAPIServer interface {
	mustEmbedUnimplementedManagerAPIServer()
}

func RegisterManagerAPIServer(s grpc.ServiceRegistrar, srv ManagerAPIServer) {
	s.RegisterService(&ManagerAPI_ServiceDesc, srv)
}

func _ManagerAPI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).Login(ctx, req.(*auth.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_Signin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.OTPSigninRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).Signin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_Signin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).Signin(ctx, req.(*auth.OTPSigninRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_OTPAuthenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.OTPAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).OTPAuthenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_OTPAuthenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).OTPAuthenticate(ctx, req.(*auth.OTPAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_IAPAuthenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.OTPAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).IAPAuthenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_IAPAuthenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).IAPAuthenticate(ctx, req.(*auth.OTPAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_SessionAuthenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).SessionAuthenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_SessionAuthenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).SessionAuthenticate(ctx, req.(*empty.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_Signout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.SignoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).Signout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_Signout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).Signout(ctx, req.(*auth.SignoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_SetUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.SetUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).SetUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_SetUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).SetUserEmail(ctx, req.(*auth.SetUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_VerifyUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.VerifyUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).VerifyUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_VerifyUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).VerifyUserEmail(ctx, req.(*auth.VerifyUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messaging.SendMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_SendMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).SendMail(ctx, req.(*messaging.SendMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(webhook.ListWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_ListWebhooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).ListWebhooks(ctx, req.(*webhook.ListWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_GetWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(webhook.Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).GetWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_GetWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).GetWebhook(ctx, req.(*webhook.Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(webhook.Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_DeleteWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).DeleteWebhook(ctx, req.(*webhook.Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.NewLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_CreateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).CreateLocation(ctx, req.(*location.NewLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_ListControlLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).ListControlLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_ListControlLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).ListControlLocations(ctx, req.(*location.ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_ListConnectivityLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).ListConnectivityLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_ListConnectivityLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).ListConnectivityLocations(ctx, req.(*location.ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_ListLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).ListLocations(ctx, req.(*location.ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.LocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).GetLocation(ctx, req.(*location.LocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_UpdateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).UpdateLocation(ctx, req.(*location.UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_DeleteLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.LocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).DeleteLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_DeleteLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).DeleteLocation(ctx, req.(*location.LocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_SelectFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).SelectFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_SelectFederation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).SelectFederation(ctx, req.(*location.Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_ListFederations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.ListFederationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).ListFederations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_ListFederations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).ListFederations(ctx, req.(*controller.ListFederationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_GetFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Federation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).GetFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_GetFederation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).GetFederation(ctx, req.(*controller.Federation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_DeleteFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Federation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).DeleteFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_DeleteFederation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).DeleteFederation(ctx, req.(*controller.Federation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_ListControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Federation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).ListControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_ListControllers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).ListControllers(ctx, req.(*controller.Federation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_GetController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Controller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).GetController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_GetController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).GetController(ctx, req.(*controller.Controller))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_DeleteController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Controller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).DeleteController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_DeleteController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).DeleteController(ctx, req.(*controller.Controller))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_RouterNATProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nac.NATProbe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).RouterNATProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_RouterNATProbe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).RouterNATProbe(ctx, req.(*nac.NATProbe))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_RouterLinkControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManagerAPIServer).RouterLinkControl(&managerAPIRouterLinkControlServer{ServerStream: stream})
}

type ManagerAPI_RouterLinkControlServer interface {
	Send(*routing.Status) error
	Recv() (*routing.LSA, error)
	grpc.ServerStream
}

type managerAPIRouterLinkControlServer struct {
	grpc.ServerStream
}

func (x *managerAPIRouterLinkControlServer) Send(m *routing.Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *managerAPIRouterLinkControlServer) Recv() (*routing.LSA, error) {
	m := new(routing.LSA)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ManagerAPI_RouterAdmissionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nac.RouterAdmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).RouterAdmissionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_RouterAdmissionControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).RouterAdmissionControl(ctx, req.(*nac.RouterAdmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_RegisterRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nac.RouterRegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).RegisterRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_RegisterRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).RegisterRouter(ctx, req.(*nac.RouterRegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_CreateRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).CreateRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_CreateRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).CreateRouter(ctx, req.(*topology.NewRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_CreateRouterWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.RouterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).CreateRouterWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_CreateRouterWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).CreateRouterWebhook(ctx, req.(*topology.RouterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_ListRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.ListRoutersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).ListRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_ListRouters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).ListRouters(ctx, req.(*topology.ListRoutersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_GetRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.RouterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).GetRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_GetRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).GetRouter(ctx, req.(*topology.RouterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_SetRouterCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.SetRouterCfgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).SetRouterCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_SetRouterCfg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).SetRouterCfg(ctx, req.(*topology.SetRouterCfgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAPI_DeleteRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.RouterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAPIServer).DeleteRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAPI_DeleteRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAPIServer).DeleteRouter(ctx, req.(*topology.RouterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerAPI_ServiceDesc is the grpc.ServiceDesc for ManagerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ManagerAPI",
	HandlerType: (*ManagerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ManagerAPI_Login_Handler,
		},
		{
			MethodName: "Signin",
			Handler:    _ManagerAPI_Signin_Handler,
		},
		{
			MethodName: "OTPAuthenticate",
			Handler:    _ManagerAPI_OTPAuthenticate_Handler,
		},
		{
			MethodName: "IAPAuthenticate",
			Handler:    _ManagerAPI_IAPAuthenticate_Handler,
		},
		{
			MethodName: "SessionAuthenticate",
			Handler:    _ManagerAPI_SessionAuthenticate_Handler,
		},
		{
			MethodName: "Signout",
			Handler:    _ManagerAPI_Signout_Handler,
		},
		{
			MethodName: "SetUserEmail",
			Handler:    _ManagerAPI_SetUserEmail_Handler,
		},
		{
			MethodName: "VerifyUserEmail",
			Handler:    _ManagerAPI_VerifyUserEmail_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _ManagerAPI_SendMail_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _ManagerAPI_ListWebhooks_Handler,
		},
		{
			MethodName: "GetWebhook",
			Handler:    _ManagerAPI_GetWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _ManagerAPI_DeleteWebhook_Handler,
		},
		{
			MethodName: "CreateLocation",
			Handler:    _ManagerAPI_CreateLocation_Handler,
		},
		{
			MethodName: "ListControlLocations",
			Handler:    _ManagerAPI_ListControlLocations_Handler,
		},
		{
			MethodName: "ListConnectivityLocations",
			Handler:    _ManagerAPI_ListConnectivityLocations_Handler,
		},
		{
			MethodName: "ListLocations",
			Handler:    _ManagerAPI_ListLocations_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _ManagerAPI_GetLocation_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _ManagerAPI_UpdateLocation_Handler,
		},
		{
			MethodName: "DeleteLocation",
			Handler:    _ManagerAPI_DeleteLocation_Handler,
		},
		{
			MethodName: "SelectFederation",
			Handler:    _ManagerAPI_SelectFederation_Handler,
		},
		{
			MethodName: "ListFederations",
			Handler:    _ManagerAPI_ListFederations_Handler,
		},
		{
			MethodName: "GetFederation",
			Handler:    _ManagerAPI_GetFederation_Handler,
		},
		{
			MethodName: "DeleteFederation",
			Handler:    _ManagerAPI_DeleteFederation_Handler,
		},
		{
			MethodName: "ListControllers",
			Handler:    _ManagerAPI_ListControllers_Handler,
		},
		{
			MethodName: "GetController",
			Handler:    _ManagerAPI_GetController_Handler,
		},
		{
			MethodName: "DeleteController",
			Handler:    _ManagerAPI_DeleteController_Handler,
		},
		{
			MethodName: "RouterNATProbe",
			Handler:    _ManagerAPI_RouterNATProbe_Handler,
		},
		{
			MethodName: "RouterAdmissionControl",
			Handler:    _ManagerAPI_RouterAdmissionControl_Handler,
		},
		{
			MethodName: "RegisterRouter",
			Handler:    _ManagerAPI_RegisterRouter_Handler,
		},
		{
			MethodName: "CreateRouter",
			Handler:    _ManagerAPI_CreateRouter_Handler,
		},
		{
			MethodName: "CreateRouterWebhook",
			Handler:    _ManagerAPI_CreateRouterWebhook_Handler,
		},
		{
			MethodName: "ListRouters",
			Handler:    _ManagerAPI_ListRouters_Handler,
		},
		{
			MethodName: "GetRouter",
			Handler:    _ManagerAPI_GetRouter_Handler,
		},
		{
			MethodName: "SetRouterCfg",
			Handler:    _ManagerAPI_SetRouterCfg_Handler,
		},
		{
			MethodName: "DeleteRouter",
			Handler:    _ManagerAPI_DeleteRouter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouterLinkControl",
			Handler:       _ManagerAPI_RouterLinkControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "n2x/protobuf/rpc/v1/managerAPI.proto",
}
