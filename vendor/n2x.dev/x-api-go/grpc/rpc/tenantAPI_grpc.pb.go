// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.0--rc1
// source: n2x/protobuf/rpc/v1/tenantAPI.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	empty "n2x.dev/x-api-go/grpc/common/empty"
	tenant "n2x.dev/x-api-go/grpc/resources/tenant"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TenantAPI_GetTopologyTenantList_FullMethodName = "/api.TenantAPI/GetTopologyTenantList"
	TenantAPI_CreateTenant_FullMethodName          = "/api.TenantAPI/CreateTenant"
	TenantAPI_ListTenants_FullMethodName           = "/api.TenantAPI/ListTenants"
	TenantAPI_GetTenant_FullMethodName             = "/api.TenantAPI/GetTenant"
	TenantAPI_UpdateTenant_FullMethodName          = "/api.TenantAPI/UpdateTenant"
	TenantAPI_DeleteTenant_FullMethodName          = "/api.TenantAPI/DeleteTenant"
)

// TenantAPIClient is the client API for TenantAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// [t-api] TenantAPI Definition: Tenant Resources
type TenantAPIClient interface {
	// Gets topology tenant list.
	GetTopologyTenantList(ctx context.Context, in *tenant.TopologyTenantListRequest, opts ...grpc.CallOption) (*tenant.TopologyTenantList, error)
	// Creates a tenant.
	CreateTenant(ctx context.Context, in *tenant.NewTenantRequest, opts ...grpc.CallOption) (*tenant.Tenant, error)
	// Lists account tenants.
	ListTenants(ctx context.Context, in *tenant.ListTenantsRequest, opts ...grpc.CallOption) (*tenant.Tenants, error)
	// Gets a tenant.
	GetTenant(ctx context.Context, in *tenant.TenantReq, opts ...grpc.CallOption) (*tenant.Tenant, error)
	// Updates a tenant.
	UpdateTenant(ctx context.Context, in *tenant.UpdateTenantRequest, opts ...grpc.CallOption) (*tenant.Tenant, error)
	// Deletes a tenant.
	DeleteTenant(ctx context.Context, in *tenant.TenantReq, opts ...grpc.CallOption) (*empty.Response, error)
}

type tenantAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantAPIClient(cc grpc.ClientConnInterface) TenantAPIClient {
	return &tenantAPIClient{cc}
}

func (c *tenantAPIClient) GetTopologyTenantList(ctx context.Context, in *tenant.TopologyTenantListRequest, opts ...grpc.CallOption) (*tenant.TopologyTenantList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(tenant.TopologyTenantList)
	err := c.cc.Invoke(ctx, TenantAPI_GetTopologyTenantList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAPIClient) CreateTenant(ctx context.Context, in *tenant.NewTenantRequest, opts ...grpc.CallOption) (*tenant.Tenant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(tenant.Tenant)
	err := c.cc.Invoke(ctx, TenantAPI_CreateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAPIClient) ListTenants(ctx context.Context, in *tenant.ListTenantsRequest, opts ...grpc.CallOption) (*tenant.Tenants, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(tenant.Tenants)
	err := c.cc.Invoke(ctx, TenantAPI_ListTenants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAPIClient) GetTenant(ctx context.Context, in *tenant.TenantReq, opts ...grpc.CallOption) (*tenant.Tenant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(tenant.Tenant)
	err := c.cc.Invoke(ctx, TenantAPI_GetTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAPIClient) UpdateTenant(ctx context.Context, in *tenant.UpdateTenantRequest, opts ...grpc.CallOption) (*tenant.Tenant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(tenant.Tenant)
	err := c.cc.Invoke(ctx, TenantAPI_UpdateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAPIClient) DeleteTenant(ctx context.Context, in *tenant.TenantReq, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, TenantAPI_DeleteTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantAPIServer is the server API for TenantAPI service.
// All implementations must embed UnimplementedTenantAPIServer
// for forward compatibility
//
// [t-api] TenantAPI Definition: Tenant Resources
type TenantAPIServer interface {
	// Gets topology tenant list.
	GetTopologyTenantList(context.Context, *tenant.TopologyTenantListRequest) (*tenant.TopologyTenantList, error)
	// Creates a tenant.
	CreateTenant(context.Context, *tenant.NewTenantRequest) (*tenant.Tenant, error)
	// Lists account tenants.
	ListTenants(context.Context, *tenant.ListTenantsRequest) (*tenant.Tenants, error)
	// Gets a tenant.
	GetTenant(context.Context, *tenant.TenantReq) (*tenant.Tenant, error)
	// Updates a tenant.
	UpdateTenant(context.Context, *tenant.UpdateTenantRequest) (*tenant.Tenant, error)
	// Deletes a tenant.
	DeleteTenant(context.Context, *tenant.TenantReq) (*empty.Response, error)
	mustEmbedUnimplementedTenantAPIServer()
}

// UnimplementedTenantAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTenantAPIServer struct {
}

func (UnimplementedTenantAPIServer) GetTopologyTenantList(context.Context, *tenant.TopologyTenantListRequest) (*tenant.TopologyTenantList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologyTenantList not implemented")
}
func (UnimplementedTenantAPIServer) CreateTenant(context.Context, *tenant.NewTenantRequest) (*tenant.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedTenantAPIServer) ListTenants(context.Context, *tenant.ListTenantsRequest) (*tenant.Tenants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedTenantAPIServer) GetTenant(context.Context, *tenant.TenantReq) (*tenant.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedTenantAPIServer) UpdateTenant(context.Context, *tenant.UpdateTenantRequest) (*tenant.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedTenantAPIServer) DeleteTenant(context.Context, *tenant.TenantReq) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedTenantAPIServer) mustEmbedUnimplementedTenantAPIServer() {}

// UnsafeTenantAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantAPIServer will
// result in compilation errors.
type UnsafeTenantAPIServer interface {
	mustEmbedUnimplementedTenantAPIServer()
}

func RegisterTenantAPIServer(s grpc.ServiceRegistrar, srv TenantAPIServer) {
	s.RegisterService(&TenantAPI_ServiceDesc, srv)
}

func _TenantAPI_GetTopologyTenantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.TopologyTenantListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAPIServer).GetTopologyTenantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantAPI_GetTopologyTenantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAPIServer).GetTopologyTenantList(ctx, req.(*tenant.TopologyTenantListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAPI_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.NewTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAPIServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantAPI_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAPIServer).CreateTenant(ctx, req.(*tenant.NewTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAPI_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAPIServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantAPI_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAPIServer).ListTenants(ctx, req.(*tenant.ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAPI_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAPIServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantAPI_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAPIServer).GetTenant(ctx, req.(*tenant.TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAPI_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAPIServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantAPI_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAPIServer).UpdateTenant(ctx, req.(*tenant.UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAPI_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAPIServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantAPI_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAPIServer).DeleteTenant(ctx, req.(*tenant.TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantAPI_ServiceDesc is the grpc.ServiceDesc for TenantAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TenantAPI",
	HandlerType: (*TenantAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopologyTenantList",
			Handler:    _TenantAPI_GetTopologyTenantList_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _TenantAPI_CreateTenant_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _TenantAPI_ListTenants_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _TenantAPI_GetTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _TenantAPI_UpdateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _TenantAPI_DeleteTenant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "n2x/protobuf/rpc/v1/tenantAPI.proto",
}
