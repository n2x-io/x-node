// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.0--rc1
// source: n2x/protobuf/rpc/v1/monitoringAPI.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	empty "n2x.dev/x-api-go/grpc/common/empty"
	events "n2x.dev/x-api-go/grpc/resources/events"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MonitoringAPI_GetAlertList_FullMethodName    = "/api.MonitoringAPI/GetAlertList"
	MonitoringAPI_ListAlerts_FullMethodName      = "/api.MonitoringAPI/ListAlerts"
	MonitoringAPI_GetAlert_FullMethodName        = "/api.MonitoringAPI/GetAlert"
	MonitoringAPI_NewAlertComment_FullMethodName = "/api.MonitoringAPI/NewAlertComment"
	MonitoringAPI_DeleteAlert_FullMethodName     = "/api.MonitoringAPI/DeleteAlert"
)

// MonitoringAPIClient is the client API for MonitoringAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// [m-api] MonitoringAPI Definition: Monitoring Resources
type MonitoringAPIClient interface {
	// alertList
	GetAlertList(ctx context.Context, in *events.AlertListRequest, opts ...grpc.CallOption) (*events.AlertList, error)
	// alerts
	ListAlerts(ctx context.Context, in *events.ListAlertsRequest, opts ...grpc.CallOption) (*events.Alerts, error)
	GetAlert(ctx context.Context, in *events.AlertReq, opts ...grpc.CallOption) (*events.Alert, error)
	// rpc SetAlert (events.Alert) returns (events.Alert) {}
	NewAlertComment(ctx context.Context, in *events.AlertNewCommentRequest, opts ...grpc.CallOption) (*events.Alert, error)
	DeleteAlert(ctx context.Context, in *events.AlertReq, opts ...grpc.CallOption) (*empty.Response, error)
}

type monitoringAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringAPIClient(cc grpc.ClientConnInterface) MonitoringAPIClient {
	return &monitoringAPIClient{cc}
}

func (c *monitoringAPIClient) GetAlertList(ctx context.Context, in *events.AlertListRequest, opts ...grpc.CallOption) (*events.AlertList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(events.AlertList)
	err := c.cc.Invoke(ctx, MonitoringAPI_GetAlertList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringAPIClient) ListAlerts(ctx context.Context, in *events.ListAlertsRequest, opts ...grpc.CallOption) (*events.Alerts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(events.Alerts)
	err := c.cc.Invoke(ctx, MonitoringAPI_ListAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringAPIClient) GetAlert(ctx context.Context, in *events.AlertReq, opts ...grpc.CallOption) (*events.Alert, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(events.Alert)
	err := c.cc.Invoke(ctx, MonitoringAPI_GetAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringAPIClient) NewAlertComment(ctx context.Context, in *events.AlertNewCommentRequest, opts ...grpc.CallOption) (*events.Alert, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(events.Alert)
	err := c.cc.Invoke(ctx, MonitoringAPI_NewAlertComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringAPIClient) DeleteAlert(ctx context.Context, in *events.AlertReq, opts ...grpc.CallOption) (*empty.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Response)
	err := c.cc.Invoke(ctx, MonitoringAPI_DeleteAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringAPIServer is the server API for MonitoringAPI service.
// All implementations must embed UnimplementedMonitoringAPIServer
// for forward compatibility
//
// [m-api] MonitoringAPI Definition: Monitoring Resources
type MonitoringAPIServer interface {
	// alertList
	GetAlertList(context.Context, *events.AlertListRequest) (*events.AlertList, error)
	// alerts
	ListAlerts(context.Context, *events.ListAlertsRequest) (*events.Alerts, error)
	GetAlert(context.Context, *events.AlertReq) (*events.Alert, error)
	// rpc SetAlert (events.Alert) returns (events.Alert) {}
	NewAlertComment(context.Context, *events.AlertNewCommentRequest) (*events.Alert, error)
	DeleteAlert(context.Context, *events.AlertReq) (*empty.Response, error)
	mustEmbedUnimplementedMonitoringAPIServer()
}

// UnimplementedMonitoringAPIServer must be embedded to have forward compatible implementations.
type UnimplementedMonitoringAPIServer struct {
}

func (UnimplementedMonitoringAPIServer) GetAlertList(context.Context, *events.AlertListRequest) (*events.AlertList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertList not implemented")
}
func (UnimplementedMonitoringAPIServer) ListAlerts(context.Context, *events.ListAlertsRequest) (*events.Alerts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlerts not implemented")
}
func (UnimplementedMonitoringAPIServer) GetAlert(context.Context, *events.AlertReq) (*events.Alert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlert not implemented")
}
func (UnimplementedMonitoringAPIServer) NewAlertComment(context.Context, *events.AlertNewCommentRequest) (*events.Alert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAlertComment not implemented")
}
func (UnimplementedMonitoringAPIServer) DeleteAlert(context.Context, *events.AlertReq) (*empty.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}
func (UnimplementedMonitoringAPIServer) mustEmbedUnimplementedMonitoringAPIServer() {}

// UnsafeMonitoringAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringAPIServer will
// result in compilation errors.
type UnsafeMonitoringAPIServer interface {
	mustEmbedUnimplementedMonitoringAPIServer()
}

func RegisterMonitoringAPIServer(s grpc.ServiceRegistrar, srv MonitoringAPIServer) {
	s.RegisterService(&MonitoringAPI_ServiceDesc, srv)
}

func _MonitoringAPI_GetAlertList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.AlertListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringAPIServer).GetAlertList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringAPI_GetAlertList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringAPIServer).GetAlertList(ctx, req.(*events.AlertListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringAPI_ListAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.ListAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringAPIServer).ListAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringAPI_ListAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringAPIServer).ListAlerts(ctx, req.(*events.ListAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringAPI_GetAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.AlertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringAPIServer).GetAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringAPI_GetAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringAPIServer).GetAlert(ctx, req.(*events.AlertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringAPI_NewAlertComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.AlertNewCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringAPIServer).NewAlertComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringAPI_NewAlertComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringAPIServer).NewAlertComment(ctx, req.(*events.AlertNewCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringAPI_DeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.AlertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringAPIServer).DeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringAPI_DeleteAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringAPIServer).DeleteAlert(ctx, req.(*events.AlertReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitoringAPI_ServiceDesc is the grpc.ServiceDesc for MonitoringAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MonitoringAPI",
	HandlerType: (*MonitoringAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlertList",
			Handler:    _MonitoringAPI_GetAlertList_Handler,
		},
		{
			MethodName: "ListAlerts",
			Handler:    _MonitoringAPI_ListAlerts_Handler,
		},
		{
			MethodName: "GetAlert",
			Handler:    _MonitoringAPI_GetAlert_Handler,
		},
		{
			MethodName: "NewAlertComment",
			Handler:    _MonitoringAPI_NewAlertComment_Handler,
		},
		{
			MethodName: "DeleteAlert",
			Handler:    _MonitoringAPI_DeleteAlert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "n2x/protobuf/rpc/v1/monitoringAPI.proto",
}
