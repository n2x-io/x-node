// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0--rc1
// source: n2x/protobuf/resources/v1/topology/subnet.proto

package topology

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	resource "n2x.dev/x-api-go/grpc/resources/resource"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SecurityPolicy int32

const (
	SecurityPolicy_ACCEPT SecurityPolicy = 0
	SecurityPolicy_DROP   SecurityPolicy = 1
)

// Enum value maps for SecurityPolicy.
var (
	SecurityPolicy_name = map[int32]string{
		0: "ACCEPT",
		1: "DROP",
	}
	SecurityPolicy_value = map[string]int32{
		"ACCEPT": 0,
		"DROP":   1,
	}
)

func (x SecurityPolicy) Enum() *SecurityPolicy {
	p := new(SecurityPolicy)
	*p = x
	return p
}

func (x SecurityPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_enumTypes[0].Descriptor()
}

func (SecurityPolicy) Type() protoreflect.EnumType {
	return &file_n2x_protobuf_resources_v1_topology_subnet_proto_enumTypes[0]
}

func (x SecurityPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityPolicy.Descriptor instead.
func (SecurityPolicy) EnumDescriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{0}
}

type Protocol int32

const (
	Protocol_ANY    Protocol = 0
	Protocol_TCP    Protocol = 11
	Protocol_UDP    Protocol = 21
	Protocol_ICMPv4 Protocol = 31
	Protocol_ICMPv6 Protocol = 32
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0:  "ANY",
		11: "TCP",
		21: "UDP",
		31: "ICMPv4",
		32: "ICMPv6",
	}
	Protocol_value = map[string]int32{
		"ANY":    0,
		"TCP":    11,
		"UDP":    21,
		"ICMPv4": 31,
		"ICMPv6": 32,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_enumTypes[1].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_n2x_protobuf_resources_v1_topology_subnet_proto_enumTypes[1]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{1}
}

type NewSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID     string         `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID      string         `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	NetID         string         `protobuf:"bytes,3,opt,name=netID,proto3" json:"netID,omitempty"`
	Description   string         `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	NetworkCIDR   string         `protobuf:"bytes,31,opt,name=networkCIDR,proto3" json:"networkCIDR,omitempty"`
	SubnetCIDR    string         `protobuf:"bytes,32,opt,name=subnetCIDR,proto3" json:"subnetCIDR,omitempty"`
	DefaultPolicy SecurityPolicy `protobuf:"varint,41,opt,name=defaultPolicy,proto3,enum=topology.SecurityPolicy" json:"defaultPolicy,omitempty"` // ACCEPT, DROP
}

func (x *NewSubnetRequest) Reset() {
	*x = NewSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSubnetRequest) ProtoMessage() {}

func (x *NewSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSubnetRequest.ProtoReflect.Descriptor instead.
func (*NewSubnetRequest) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{0}
}

func (x *NewSubnetRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *NewSubnetRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *NewSubnetRequest) GetNetID() string {
	if x != nil {
		return x.NetID
	}
	return ""
}

func (x *NewSubnetRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewSubnetRequest) GetNetworkCIDR() string {
	if x != nil {
		return x.NetworkCIDR
	}
	return ""
}

func (x *NewSubnetRequest) GetSubnetCIDR() string {
	if x != nil {
		return x.SubnetCIDR
	}
	return ""
}

func (x *NewSubnetRequest) GetDefaultPolicy() SecurityPolicy {
	if x != nil {
		return x.DefaultPolicy
	}
	return SecurityPolicy_ACCEPT
}

type UpdateSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID     string         `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID      string         `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	NetID         string         `protobuf:"bytes,3,opt,name=netID,proto3" json:"netID,omitempty"`
	SubnetID      string         `protobuf:"bytes,4,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	Description   string         `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	DefaultPolicy SecurityPolicy `protobuf:"varint,41,opt,name=defaultPolicy,proto3,enum=topology.SecurityPolicy" json:"defaultPolicy,omitempty"` // ACCEPT, DROP
}

func (x *UpdateSubnetRequest) Reset() {
	*x = UpdateSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnetRequest) ProtoMessage() {}

func (x *UpdateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnetRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateSubnetRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *UpdateSubnetRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *UpdateSubnetRequest) GetNetID() string {
	if x != nil {
		return x.NetID
	}
	return ""
}

func (x *UpdateSubnetRequest) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

func (x *UpdateSubnetRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSubnetRequest) GetDefaultPolicy() SecurityPolicy {
	if x != nil {
		return x.DefaultPolicy
	}
	return SecurityPolicy_ACCEPT
}

type RemoveSubnetIPAMEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID  string `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID   string `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	NetID      string `protobuf:"bytes,3,opt,name=netID,proto3" json:"netID,omitempty"`
	SubnetID   string `protobuf:"bytes,4,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	EndpointID string `protobuf:"bytes,11,opt,name=endpointID,proto3" json:"endpointID,omitempty"`
	IPv4       string `protobuf:"bytes,12,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
}

func (x *RemoveSubnetIPAMEntryRequest) Reset() {
	*x = RemoveSubnetIPAMEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubnetIPAMEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubnetIPAMEntryRequest) ProtoMessage() {}

func (x *RemoveSubnetIPAMEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubnetIPAMEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveSubnetIPAMEntryRequest) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveSubnetIPAMEntryRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *RemoveSubnetIPAMEntryRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *RemoveSubnetIPAMEntryRequest) GetNetID() string {
	if x != nil {
		return x.NetID
	}
	return ""
}

func (x *RemoveSubnetIPAMEntryRequest) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

func (x *RemoveSubnetIPAMEntryRequest) GetEndpointID() string {
	if x != nil {
		return x.EndpointID
	}
	return ""
}

func (x *RemoveSubnetIPAMEntryRequest) GetIPv4() string {
	if x != nil {
		return x.IPv4
	}
	return ""
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID     string   `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID      string   `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	NetID         string   `protobuf:"bytes,3,opt,name=netID,proto3" json:"netID,omitempty"`
	SubnetID      string   `protobuf:"bytes,4,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	Description   string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	IPAM          *IPAM    `protobuf:"bytes,21,opt,name=IPAM,proto3" json:"IPAM,omitempty"`
	NetworkPolicy *Policy  `protobuf:"bytes,41,opt,name=networkPolicy,proto3" json:"networkPolicy,omitempty"`
	Tags          []string `protobuf:"bytes,1000,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{3}
}

func (x *Subnet) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *Subnet) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *Subnet) GetNetID() string {
	if x != nil {
		return x.NetID
	}
	return ""
}

func (x *Subnet) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

func (x *Subnet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Subnet) GetIPAM() *IPAM {
	if x != nil {
		return x.IPAM
	}
	return nil
}

func (x *Subnet) GetNetworkPolicy() *Policy {
	if x != nil {
		return x.NetworkPolicy
	}
	return nil
}

func (x *Subnet) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Subnets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta    *resource.ListResponse `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Subnets []*Subnet              `protobuf:"bytes,2,rep,name=Subnets,proto3" json:"Subnets,omitempty"`
}

func (x *Subnets) Reset() {
	*x = Subnets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnets) ProtoMessage() {}

func (x *Subnets) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnets.ProtoReflect.Descriptor instead.
func (*Subnets) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{4}
}

func (x *Subnets) GetMeta() *resource.ListResponse {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Subnets) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type ListSubnetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta    *resource.ListRequest `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Network *NetworkReq           `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *ListSubnetsRequest) Reset() {
	*x = ListSubnetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubnetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetsRequest) ProtoMessage() {}

func (x *ListSubnetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetsRequest.ProtoReflect.Descriptor instead.
func (*ListSubnetsRequest) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{5}
}

func (x *ListSubnetsRequest) GetMeta() *resource.ListRequest {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ListSubnetsRequest) GetNetwork() *NetworkReq {
	if x != nil {
		return x.Network
	}
	return nil
}

type IPAM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkCIDR    string                       `protobuf:"bytes,1,opt,name=networkCIDR,proto3" json:"networkCIDR,omitempty"`
	SubnetCIDR     string                       `protobuf:"bytes,2,opt,name=subnetCIDR,proto3" json:"subnetCIDR,omitempty"`
	Endpoints      map[string]string            `protobuf:"bytes,3,rep,name=endpoints,proto3" json:"endpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`  // map[endpointID]ipv4
	Leased         map[string]*LeaseEndpointMap `protobuf:"bytes,4,rep,name=leased,proto3" json:"leased,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`        // map[ipv4]map[endpointID]bool & map[ipv4]map[nodeID]bool
	Available      map[string]bool              `protobuf:"bytes,5,rep,name=available,proto3" json:"available,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // map[ipv4]bool
	TotalAvailable int32                        `protobuf:"varint,6,opt,name=totalAvailable,proto3" json:"totalAvailable,omitempty"`
	TotalLeased    int32                        `protobuf:"varint,7,opt,name=totalLeased,proto3" json:"totalLeased,omitempty"`
}

func (x *IPAM) Reset() {
	*x = IPAM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAM) ProtoMessage() {}

func (x *IPAM) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAM.ProtoReflect.Descriptor instead.
func (*IPAM) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{6}
}

func (x *IPAM) GetNetworkCIDR() string {
	if x != nil {
		return x.NetworkCIDR
	}
	return ""
}

func (x *IPAM) GetSubnetCIDR() string {
	if x != nil {
		return x.SubnetCIDR
	}
	return ""
}

func (x *IPAM) GetEndpoints() map[string]string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *IPAM) GetLeased() map[string]*LeaseEndpointMap {
	if x != nil {
		return x.Leased
	}
	return nil
}

func (x *IPAM) GetAvailable() map[string]bool {
	if x != nil {
		return x.Available
	}
	return nil
}

func (x *IPAM) GetTotalAvailable() int32 {
	if x != nil {
		return x.TotalAvailable
	}
	return 0
}

func (x *IPAM) GetTotalLeased() int32 {
	if x != nil {
		return x.TotalLeased
	}
	return 0
}

type LeaseEndpointMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints map[string]bool `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // map[endpointID]bool
	Nodes     map[string]bool `protobuf:"bytes,11,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`        // map[nodeID]bool (counts how many nodes have
}

func (x *LeaseEndpointMap) Reset() {
	*x = LeaseEndpointMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseEndpointMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseEndpointMap) ProtoMessage() {}

func (x *LeaseEndpointMap) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseEndpointMap.ProtoReflect.Descriptor instead.
func (*LeaseEndpointMap) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{7}
}

func (x *LeaseEndpointMap) GetEndpoints() map[string]bool {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *LeaseEndpointMap) GetNodes() map[string]bool {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultPolicy SecurityPolicy `protobuf:"varint,1,opt,name=defaultPolicy,proto3,enum=topology.SecurityPolicy" json:"defaultPolicy,omitempty"` // ACCEPT, DROP
	// map<string, Filter> networkFilters = 11;  // map[nfID]*NetworkFilter
	NetworkFilters []*Filter `protobuf:"bytes,11,rep,name=networkFilters,proto3" json:"networkFilters,omitempty"`
	LastModified   int64     `protobuf:"varint,1001,opt,name=lastModified,proto3" json:"lastModified,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{8}
}

func (x *Policy) GetDefaultPolicy() SecurityPolicy {
	if x != nil {
		return x.DefaultPolicy
	}
	return SecurityPolicy_ACCEPT
}

func (x *Policy) GetNetworkFilters() []*Filter {
	if x != nil {
		return x.NetworkFilters
	}
	return nil
}

func (x *Policy) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NfID        string         `protobuf:"bytes,11,opt,name=nfID,proto3" json:"nfID,omitempty"`
	Index       uint32         `protobuf:"varint,21,opt,name=index,proto3" json:"index,omitempty"`
	Description string         `protobuf:"bytes,31,opt,name=description,proto3" json:"description,omitempty"`
	SrcIPNet    string         `protobuf:"bytes,41,opt,name=srcIPNet,proto3" json:"srcIPNet,omitempty"`
	DstIPNet    string         `protobuf:"bytes,42,opt,name=dstIPNet,proto3" json:"dstIPNet,omitempty"` // usually, the endpoint addr
	Proto       Protocol       `protobuf:"varint,51,opt,name=proto,proto3,enum=topology.Protocol" json:"proto,omitempty"`
	DstPort     uint32         `protobuf:"varint,61,opt,name=dstPort,proto3" json:"dstPort,omitempty"`
	Policy      SecurityPolicy `protobuf:"varint,101,opt,name=policy,proto3,enum=topology.SecurityPolicy" json:"policy,omitempty"` // ACCEPT, DROP
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{9}
}

func (x *Filter) GetNfID() string {
	if x != nil {
		return x.NfID
	}
	return ""
}

func (x *Filter) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Filter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Filter) GetSrcIPNet() string {
	if x != nil {
		return x.SrcIPNet
	}
	return ""
}

func (x *Filter) GetDstIPNet() string {
	if x != nil {
		return x.DstIPNet
	}
	return ""
}

func (x *Filter) GetProto() Protocol {
	if x != nil {
		return x.Proto
	}
	return Protocol_ANY
}

func (x *Filter) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *Filter) GetPolicy() SecurityPolicy {
	if x != nil {
		return x.Policy
	}
	return SecurityPolicy_ACCEPT
}

type SubnetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID string `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID  string `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	NetID     string `protobuf:"bytes,3,opt,name=netID,proto3" json:"netID,omitempty"`
	SubnetID  string `protobuf:"bytes,4,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
}

func (x *SubnetReq) Reset() {
	*x = SubnetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetReq) ProtoMessage() {}

func (x *SubnetReq) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetReq.ProtoReflect.Descriptor instead.
func (*SubnetReq) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{10}
}

func (x *SubnetReq) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *SubnetReq) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *SubnetReq) GetNetID() string {
	if x != nil {
		return x.NetID
	}
	return ""
}

func (x *SubnetReq) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

type NewNetworkFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetReq   *SubnetReq     `protobuf:"bytes,1,opt,name=subnetReq,proto3" json:"subnetReq,omitempty"`
	Index       uint32         `protobuf:"varint,21,opt,name=index,proto3" json:"index,omitempty"`
	Description string         `protobuf:"bytes,31,opt,name=description,proto3" json:"description,omitempty"`
	SrcIPNet    string         `protobuf:"bytes,41,opt,name=srcIPNet,proto3" json:"srcIPNet,omitempty"`
	DstIPNet    string         `protobuf:"bytes,42,opt,name=dstIPNet,proto3" json:"dstIPNet,omitempty"` // usually, the endpoint addr
	Proto       Protocol       `protobuf:"varint,51,opt,name=proto,proto3,enum=topology.Protocol" json:"proto,omitempty"`
	DstPort     uint32         `protobuf:"varint,61,opt,name=dstPort,proto3" json:"dstPort,omitempty"`
	Policy      SecurityPolicy `protobuf:"varint,101,opt,name=policy,proto3,enum=topology.SecurityPolicy" json:"policy,omitempty"` // ACCEPT, DROP
}

func (x *NewNetworkFilterRequest) Reset() {
	*x = NewNetworkFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewNetworkFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewNetworkFilterRequest) ProtoMessage() {}

func (x *NewNetworkFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewNetworkFilterRequest.ProtoReflect.Descriptor instead.
func (*NewNetworkFilterRequest) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{11}
}

func (x *NewNetworkFilterRequest) GetSubnetReq() *SubnetReq {
	if x != nil {
		return x.SubnetReq
	}
	return nil
}

func (x *NewNetworkFilterRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NewNetworkFilterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewNetworkFilterRequest) GetSrcIPNet() string {
	if x != nil {
		return x.SrcIPNet
	}
	return ""
}

func (x *NewNetworkFilterRequest) GetDstIPNet() string {
	if x != nil {
		return x.DstIPNet
	}
	return ""
}

func (x *NewNetworkFilterRequest) GetProto() Protocol {
	if x != nil {
		return x.Proto
	}
	return Protocol_ANY
}

func (x *NewNetworkFilterRequest) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *NewNetworkFilterRequest) GetPolicy() SecurityPolicy {
	if x != nil {
		return x.Policy
	}
	return SecurityPolicy_ACCEPT
}

type UpdateNetworkFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetReq   *SubnetReq     `protobuf:"bytes,1,opt,name=subnetReq,proto3" json:"subnetReq,omitempty"`
	NfID        string         `protobuf:"bytes,11,opt,name=nfID,proto3" json:"nfID,omitempty"`
	Index       uint32         `protobuf:"varint,21,opt,name=index,proto3" json:"index,omitempty"`
	Description string         `protobuf:"bytes,31,opt,name=description,proto3" json:"description,omitempty"`
	SrcIPNet    string         `protobuf:"bytes,41,opt,name=srcIPNet,proto3" json:"srcIPNet,omitempty"`
	DstIPNet    string         `protobuf:"bytes,42,opt,name=dstIPNet,proto3" json:"dstIPNet,omitempty"` // usually, the endpoint addr
	Proto       Protocol       `protobuf:"varint,51,opt,name=proto,proto3,enum=topology.Protocol" json:"proto,omitempty"`
	DstPort     uint32         `protobuf:"varint,61,opt,name=dstPort,proto3" json:"dstPort,omitempty"`
	Policy      SecurityPolicy `protobuf:"varint,101,opt,name=policy,proto3,enum=topology.SecurityPolicy" json:"policy,omitempty"` // ACCEPT, DROP
}

func (x *UpdateNetworkFilterRequest) Reset() {
	*x = UpdateNetworkFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetworkFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkFilterRequest) ProtoMessage() {}

func (x *UpdateNetworkFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkFilterRequest.ProtoReflect.Descriptor instead.
func (*UpdateNetworkFilterRequest) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateNetworkFilterRequest) GetSubnetReq() *SubnetReq {
	if x != nil {
		return x.SubnetReq
	}
	return nil
}

func (x *UpdateNetworkFilterRequest) GetNfID() string {
	if x != nil {
		return x.NfID
	}
	return ""
}

func (x *UpdateNetworkFilterRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UpdateNetworkFilterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateNetworkFilterRequest) GetSrcIPNet() string {
	if x != nil {
		return x.SrcIPNet
	}
	return ""
}

func (x *UpdateNetworkFilterRequest) GetDstIPNet() string {
	if x != nil {
		return x.DstIPNet
	}
	return ""
}

func (x *UpdateNetworkFilterRequest) GetProto() Protocol {
	if x != nil {
		return x.Proto
	}
	return Protocol_ANY
}

func (x *UpdateNetworkFilterRequest) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *UpdateNetworkFilterRequest) GetPolicy() SecurityPolicy {
	if x != nil {
		return x.Policy
	}
	return SecurityPolicy_ACCEPT
}

type DeleteNetworkFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetReq *SubnetReq `protobuf:"bytes,1,opt,name=subnetReq,proto3" json:"subnetReq,omitempty"`
	NfID      string     `protobuf:"bytes,11,opt,name=nfID,proto3" json:"nfID,omitempty"`
}

func (x *DeleteNetworkFilterRequest) Reset() {
	*x = DeleteNetworkFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNetworkFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworkFilterRequest) ProtoMessage() {}

func (x *DeleteNetworkFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNetworkFilterRequest.ProtoReflect.Descriptor instead.
func (*DeleteNetworkFilterRequest) Descriptor() ([]byte, []int) {
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteNetworkFilterRequest) GetSubnetReq() *SubnetReq {
	if x != nil {
		return x.SubnetReq
	}
	return nil
}

func (x *DeleteNetworkFilterRequest) GetNfID() string {
	if x != nil {
		return x.NfID
	}
	return ""
}

var File_n2x_protobuf_resources_v1_topology_subnet_proto protoreflect.FileDescriptor

var file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6e, 0x32, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x1a, 0x2d, 0x6e, 0x32, 0x78,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x6e, 0x32, 0x78, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x02, 0x0a,
	0x10, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x49,
	0x44, 0x52, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x49, 0x44, 0x52, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43,
	0x49, 0x44, 0x52, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x43, 0x49, 0x44, 0x52, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xe3, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xbe, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x50, 0x41, 0x4d,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x50, 0x76, 0x34, 0x22, 0x87, 0x02, 0x0a,
	0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x49, 0x50, 0x41, 0x4d, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49,
	0x50, 0x41, 0x4d, 0x52, 0x04, 0x49, 0x50, 0x41, 0x4d, 0x12, 0x36, 0x0a, 0x0d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x13, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x61, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2a, 0x0a,
	0x07, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x07, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x22, 0x6f, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x93, 0x04, 0x0a, 0x04, 0x49,
	0x50, 0x41, 0x4d, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x49,
	0x44, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x49, 0x44, 0x52, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43,
	0x49, 0x44, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x43, 0x49, 0x44, 0x52, 0x12, 0x3b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49, 0x50,
	0x41, 0x4d, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x1a, 0x3c, 0x0a,
	0x0e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0b, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x90, 0x02, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x47, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3e,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38,
	0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x82, 0x02,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x66, 0x49, 0x44,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x66, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x49, 0x50, 0x4e, 0x65, 0x74,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x50, 0x4e, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x73, 0x74, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x30, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x77, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x22, 0xb2, 0x02, 0x0a, 0x17,
	0x4e, 0x65, 0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x73, 0x74, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x73, 0x74, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x30,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0xc9, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x66, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x66, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x72, 0x63, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x73,
	0x74, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x73,
	0x74, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x63, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x66, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x66, 0x49,
	0x44, 0x2a, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x2a, 0x3d, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x15,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x43, 0x4d, 0x50, 0x76, 0x34, 0x10, 0x1f, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x43, 0x4d, 0x50, 0x76, 0x36, 0x10, 0x20, 0x42, 0x2a, 0x5a, 0x28, 0x6e, 0x32, 0x78, 0x2e,
	0x64, 0x65, 0x76, 0x2f, 0x78, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescOnce sync.Once
	file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescData = file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDesc
)

func file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescGZIP() []byte {
	file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescOnce.Do(func() {
		file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescData = protoimpl.X.CompressGZIP(file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescData)
	})
	return file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDescData
}

var file_n2x_protobuf_resources_v1_topology_subnet_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_n2x_protobuf_resources_v1_topology_subnet_proto_goTypes = []any{
	(SecurityPolicy)(0),                  // 0: topology.SecurityPolicy
	(Protocol)(0),                        // 1: topology.Protocol
	(*NewSubnetRequest)(nil),             // 2: topology.NewSubnetRequest
	(*UpdateSubnetRequest)(nil),          // 3: topology.UpdateSubnetRequest
	(*RemoveSubnetIPAMEntryRequest)(nil), // 4: topology.RemoveSubnetIPAMEntryRequest
	(*Subnet)(nil),                       // 5: topology.Subnet
	(*Subnets)(nil),                      // 6: topology.Subnets
	(*ListSubnetsRequest)(nil),           // 7: topology.ListSubnetsRequest
	(*IPAM)(nil),                         // 8: topology.IPAM
	(*LeaseEndpointMap)(nil),             // 9: topology.LeaseEndpointMap
	(*Policy)(nil),                       // 10: topology.Policy
	(*Filter)(nil),                       // 11: topology.Filter
	(*SubnetReq)(nil),                    // 12: topology.SubnetReq
	(*NewNetworkFilterRequest)(nil),      // 13: topology.NewNetworkFilterRequest
	(*UpdateNetworkFilterRequest)(nil),   // 14: topology.UpdateNetworkFilterRequest
	(*DeleteNetworkFilterRequest)(nil),   // 15: topology.DeleteNetworkFilterRequest
	nil,                                  // 16: topology.IPAM.EndpointsEntry
	nil,                                  // 17: topology.IPAM.LeasedEntry
	nil,                                  // 18: topology.IPAM.AvailableEntry
	nil,                                  // 19: topology.LeaseEndpointMap.EndpointsEntry
	nil,                                  // 20: topology.LeaseEndpointMap.NodesEntry
	(*resource.ListResponse)(nil),        // 21: resource.ListResponse
	(*resource.ListRequest)(nil),         // 22: resource.ListRequest
	(*NetworkReq)(nil),                   // 23: topology.NetworkReq
}
var file_n2x_protobuf_resources_v1_topology_subnet_proto_depIdxs = []int32{
	0,  // 0: topology.NewSubnetRequest.defaultPolicy:type_name -> topology.SecurityPolicy
	0,  // 1: topology.UpdateSubnetRequest.defaultPolicy:type_name -> topology.SecurityPolicy
	8,  // 2: topology.Subnet.IPAM:type_name -> topology.IPAM
	10, // 3: topology.Subnet.networkPolicy:type_name -> topology.Policy
	21, // 4: topology.Subnets.meta:type_name -> resource.ListResponse
	5,  // 5: topology.Subnets.Subnets:type_name -> topology.Subnet
	22, // 6: topology.ListSubnetsRequest.meta:type_name -> resource.ListRequest
	23, // 7: topology.ListSubnetsRequest.network:type_name -> topology.NetworkReq
	16, // 8: topology.IPAM.endpoints:type_name -> topology.IPAM.EndpointsEntry
	17, // 9: topology.IPAM.leased:type_name -> topology.IPAM.LeasedEntry
	18, // 10: topology.IPAM.available:type_name -> topology.IPAM.AvailableEntry
	19, // 11: topology.LeaseEndpointMap.endpoints:type_name -> topology.LeaseEndpointMap.EndpointsEntry
	20, // 12: topology.LeaseEndpointMap.nodes:type_name -> topology.LeaseEndpointMap.NodesEntry
	0,  // 13: topology.Policy.defaultPolicy:type_name -> topology.SecurityPolicy
	11, // 14: topology.Policy.networkFilters:type_name -> topology.Filter
	1,  // 15: topology.Filter.proto:type_name -> topology.Protocol
	0,  // 16: topology.Filter.policy:type_name -> topology.SecurityPolicy
	12, // 17: topology.NewNetworkFilterRequest.subnetReq:type_name -> topology.SubnetReq
	1,  // 18: topology.NewNetworkFilterRequest.proto:type_name -> topology.Protocol
	0,  // 19: topology.NewNetworkFilterRequest.policy:type_name -> topology.SecurityPolicy
	12, // 20: topology.UpdateNetworkFilterRequest.subnetReq:type_name -> topology.SubnetReq
	1,  // 21: topology.UpdateNetworkFilterRequest.proto:type_name -> topology.Protocol
	0,  // 22: topology.UpdateNetworkFilterRequest.policy:type_name -> topology.SecurityPolicy
	12, // 23: topology.DeleteNetworkFilterRequest.subnetReq:type_name -> topology.SubnetReq
	9,  // 24: topology.IPAM.LeasedEntry.value:type_name -> topology.LeaseEndpointMap
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_n2x_protobuf_resources_v1_topology_subnet_proto_init() }
func file_n2x_protobuf_resources_v1_topology_subnet_proto_init() {
	if File_n2x_protobuf_resources_v1_topology_subnet_proto != nil {
		return
	}
	file_n2x_protobuf_resources_v1_topology_network_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*NewSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveSubnetIPAMEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Subnets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListSubnetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*IPAM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*LeaseEndpointMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SubnetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*NewNetworkFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateNetworkFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteNetworkFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_n2x_protobuf_resources_v1_topology_subnet_proto_goTypes,
		DependencyIndexes: file_n2x_protobuf_resources_v1_topology_subnet_proto_depIdxs,
		EnumInfos:         file_n2x_protobuf_resources_v1_topology_subnet_proto_enumTypes,
		MessageInfos:      file_n2x_protobuf_resources_v1_topology_subnet_proto_msgTypes,
	}.Build()
	File_n2x_protobuf_resources_v1_topology_subnet_proto = out.File
	file_n2x_protobuf_resources_v1_topology_subnet_proto_rawDesc = nil
	file_n2x_protobuf_resources_v1_topology_subnet_proto_goTypes = nil
	file_n2x_protobuf_resources_v1_topology_subnet_proto_depIdxs = nil
}
